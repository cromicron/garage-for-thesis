{
  "_snapshotter": {
    "_snapshot_dir": "/home/stud/nalis/thesis/garage-for-thesis/constrained_meta_rl_scripts/data/local/experiment/main_env_name=pick-place-v2_seed=1_epochs=2000_rollouts_per_task=10_meta_batch_size=25_inner_lr=0.0001_train_constraint=True_lr_lagrangian=0.5_lagrangian=1.0_constraint_mode=relative_constraint_size=0.03_w_and_b=True",
    "_snapshot_mode": "last",
    "_snapshot_gap": 1,
    "$type": "garage.experiment.snapshotter.Snapshotter"
  },
  "_has_setup": true,
  "_plot": false,
  "_seed": 1,
  "_train_args": {
    "n_epochs": 2000,
    "batch_size": 5000,
    "plot": false,
    "store_episodes": false,
    "pause_for_plot": false,
    "start_epoch": 0,
    "$type": "garage.trainer.TrainArgs"
  },
  "_stats": {
    "total_epoch": 0,
    "total_itr": 0,
    "total_env_steps": 0,
    "last_episode": "None",
    "$type": "garage.trainer.ExperimentStats"
  },
  "_algo": {
    "_sampler": {
      "_worker_factory": {
        "n_workers": 25,
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_class": {
          "$typename": "garage.sampler.default_worker.DefaultWorker"
        },
        "_worker_args": {},
        "$type": "garage.sampler.worker_factory.WorkerFactory"
      },
      "_sampler_worker": {
        "__ray_metadata__": "<ray.actor._ActorClassMetadata object at 0x7f0177844fa0>",
        "_default_options": {},
        "$type": "garage.sampler.ray_sampler.ActorClass(SamplerWorker)"
      },
      "_agents": {
        "training": true,
        "_parameters": {
          "lagrangian": {
            "$type": "torch.nn.parameter.Parameter"
          }
        },
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_log_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              },
              "max_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_shared_mean_log_std_network": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 45.0,
                            "out_features": 128,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f01609a05e0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 128,
                            "out_features": 128,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f01609a05e0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 128,
                            "out_features": 4.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f01609a05e0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 128,
                            "out_features": 4.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f01609a05e0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
              }
            },
            "_input_dim": 45.0,
            "_hidden_sizes": [
              128,
              128
            ],
            "_action_dim": 4.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 0.5,
            "_max_std": 1.5,
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f01609a05e0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f01609a05e0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "<built-in method tanh of type object at 0x7f01609a05e0>",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_init_std": {
              "$type": "torch.Tensor"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": {
              "$type": "torch.Tensor"
            },
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 500,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "_shape": [
              45
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 45.0,
        "_action_dim": 4.0,
        "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      "_envs": [
        {
          "_env": {
            "_env": {
              "action_scale": 0.01,
              "action_rot_scale": 1.0,
              "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
              "hand_high": "array([0.5, 1. , 0.5])",
              "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
              "mocap_high": "array([0.5, 1. , 0.5])",
              "curr_path_length": 0,
              "seeded_rand_vec": false,
              "_freeze_rand_vec": true,
              "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
              "num_resets": 0,
              "current_seed": "None",
              "obj_init_pos": "None",
              "discrete_goal_space": "None",
              "discrete_goals": [],
              "active_discrete_goal": "None",
              "_partially_observable": true,
              "_constraint_mode": "relative",
              "_constraint_size": 0.03,
              "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              "width": 480,
              "height": 480,
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
              "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
              "frame_skip": 5,
              "observation_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_above": "array([ True,  True,  True,  True])",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "render_mode": "None",
              "camera_name": "None",
              "camera_id": "None",
              "mujoco_renderer": {
                "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
                "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
                "_viewers": {},
                "viewer": "None",
                "default_cam_config": "None",
                "width": 480,
                "height": 480,
                "max_geom": 1000,
                "_vopt": {},
                "camera_id": -1,
                "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
              },
              "_did_see_sim_exception": false,
              "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
              "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
              "_obs_obj_max_len": 14,
              "_set_task_called": true,
              "hand_init_pos": "array([0. , 0.6, 0.2])",
              "_target_pos": "None",
              "_random_reset_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  6
                ],
                "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
                "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
                "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "goal_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  3
                ],
                "low": "array([-0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True])",
                "high": "array([0.1, 0.9, 0.3])",
                "bounded_above": "array([ True,  True,  True])",
                "low_repr": "[-0.1   0.8   0.05]",
                "high_repr": "[0.1 0.9 0.3]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "_last_stable_obs": "None",
              "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
              "_ezpickle_args": [
                "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
                5,
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                0.01,
                1.0
              ],
              "_ezpickle_kwargs": {},
              "init_config": {
                "obj_init_angle": 0.3,
                "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                "hand_init_pos": "array([0. , 0.6, 0.2])"
              },
              "goal": "array([0.1, 0.8, 0.2])",
              "obj_init_angle": 0.3,
              "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
            },
            "_max_episode_length": 500,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_task_name": "pick-place-v2",
          "_task_id": "None",
          "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
        },
        {
          "_env": {
            "_env": {
              "action_scale": 0.01,
              "action_rot_scale": 1.0,
              "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
              "hand_high": "array([0.5, 1. , 0.5])",
              "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
              "mocap_high": "array([0.5, 1. , 0.5])",
              "curr_path_length": 0,
              "seeded_rand_vec": false,
              "_freeze_rand_vec": true,
              "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
              "num_resets": 0,
              "current_seed": "None",
              "obj_init_pos": "None",
              "discrete_goal_space": "None",
              "discrete_goals": [],
              "active_discrete_goal": "None",
              "_partially_observable": true,
              "_constraint_mode": "relative",
              "_constraint_size": 0.03,
              "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              "width": 480,
              "height": 480,
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
              "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
              "frame_skip": 5,
              "observation_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_above": "array([ True,  True,  True,  True])",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "render_mode": "None",
              "camera_name": "None",
              "camera_id": "None",
              "mujoco_renderer": {
                "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
                "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
                "_viewers": {},
                "viewer": "None",
                "default_cam_config": "None",
                "width": 480,
                "height": 480,
                "max_geom": 1000,
                "_vopt": {},
                "camera_id": -1,
                "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
              },
              "_did_see_sim_exception": false,
              "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
              "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
              "_obs_obj_max_len": 14,
              "_set_task_called": true,
              "hand_init_pos": "array([0. , 0.6, 0.2])",
              "_target_pos": "None",
              "_random_reset_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  6
                ],
                "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
                "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
                "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "goal_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  3
                ],
                "low": "array([-0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True])",
                "high": "array([0.1, 0.9, 0.3])",
                "bounded_above": "array([ True,  True,  True])",
                "low_repr": "[-0.1   0.8   0.05]",
                "high_repr": "[0.1 0.9 0.3]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "_last_stable_obs": "None",
              "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
              "_ezpickle_args": [
                "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
                5,
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                0.01,
                1.0
              ],
              "_ezpickle_kwargs": {},
              "init_config": {
                "obj_init_angle": 0.3,
                "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                "hand_init_pos": "array([0. , 0.6, 0.2])"
              },
              "goal": "array([0.1, 0.8, 0.2])",
              "obj_init_angle": 0.3,
              "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
            },
            "_max_episode_length": 500,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_task_name": "pick-place-v2",
          "_task_id": "None",
          "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
        },
        {
          "_env": {
            "_env": {
              "action_scale": 0.01,
              "action_rot_scale": 1.0,
              "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
              "hand_high": "array([0.5, 1. , 0.5])",
              "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
              "mocap_high": "array([0.5, 1. , 0.5])",
              "curr_path_length": 0,
              "seeded_rand_vec": false,
              "_freeze_rand_vec": true,
              "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
              "num_resets": 0,
              "current_seed": "None",
              "obj_init_pos": "None",
              "discrete_goal_space": "None",
              "discrete_goals": [],
              "active_discrete_goal": "None",
              "_partially_observable": true,
              "_constraint_mode": "relative",
              "_constraint_size": 0.03,
              "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              "width": 480,
              "height": 480,
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
              "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
              "frame_skip": 5,
              "observation_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_above": "array([ True,  True,  True,  True])",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "render_mode": "None",
              "camera_name": "None",
              "camera_id": "None",
              "mujoco_renderer": {
                "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
                "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
                "_viewers": {},
                "viewer": "None",
                "default_cam_config": "None",
                "width": 480,
                "height": 480,
                "max_geom": 1000,
                "_vopt": {},
                "camera_id": -1,
                "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
              },
              "_did_see_sim_exception": false,
              "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
              "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
              "_obs_obj_max_len": 14,
              "_set_task_called": true,
              "hand_init_pos": "array([0. , 0.6, 0.2])",
              "_target_pos": "None",
              "_random_reset_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  6
                ],
                "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
                "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
                "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "goal_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  3
                ],
                "low": "array([-0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True])",
                "high": "array([0.1, 0.9, 0.3])",
                "bounded_above": "array([ True,  True,  True])",
                "low_repr": "[-0.1   0.8   0.05]",
                "high_repr": "[0.1 0.9 0.3]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "_last_stable_obs": "None",
              "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
              "_ezpickle_args": [
                "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
                5,
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                0.01,
                1.0
              ],
              "_ezpickle_kwargs": {},
              "init_config": {
                "obj_init_angle": 0.3,
                "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                "hand_init_pos": "array([0. , 0.6, 0.2])"
              },
              "goal": "array([0.1, 0.8, 0.2])",
              "obj_init_angle": 0.3,
              "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
            },
            "_max_episode_length": 500,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_task_name": "pick-place-v2",
          "_task_id": "None",
          "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
        },
        {
          "_env": {
            "_env": {
              "action_scale": 0.01,
              "action_rot_scale": 1.0,
              "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
              "hand_high": "array([0.5, 1. , 0.5])",
              "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
              "mocap_high": "array([0.5, 1. , 0.5])",
              "curr_path_length": 0,
              "seeded_rand_vec": false,
              "_freeze_rand_vec": true,
              "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
              "num_resets": 0,
              "current_seed": "None",
              "obj_init_pos": "None",
              "discrete_goal_space": "None",
              "discrete_goals": [],
              "active_discrete_goal": "None",
              "_partially_observable": true,
              "_constraint_mode": "relative",
              "_constraint_size": 0.03,
              "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              "width": 480,
              "height": 480,
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
              "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
              "frame_skip": 5,
              "observation_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_above": "array([ True,  True,  True,  True])",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "render_mode": "None",
              "camera_name": "None",
              "camera_id": "None",
              "mujoco_renderer": {
                "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
                "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
                "_viewers": {},
                "viewer": "None",
                "default_cam_config": "None",
                "width": 480,
                "height": 480,
                "max_geom": 1000,
                "_vopt": {},
                "camera_id": -1,
                "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
              },
              "_did_see_sim_exception": false,
              "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
              "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
              "_obs_obj_max_len": 14,
              "_set_task_called": true,
              "hand_init_pos": "array([0. , 0.6, 0.2])",
              "_target_pos": "None",
              "_random_reset_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  6
                ],
                "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
                "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
                "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "goal_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  3
                ],
                "low": "array([-0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True])",
                "high": "array([0.1, 0.9, 0.3])",
                "bounded_above": "array([ True,  True,  True])",
                "low_repr": "[-0.1   0.8   0.05]",
                "high_repr": "[0.1 0.9 0.3]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "_last_stable_obs": "None",
              "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
              "_ezpickle_args": [
                "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
                5,
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                0.01,
                1.0
              ],
              "_ezpickle_kwargs": {},
              "init_config": {
                "obj_init_angle": 0.3,
                "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                "hand_init_pos": "array([0. , 0.6, 0.2])"
              },
              "goal": "array([0.1, 0.8, 0.2])",
              "obj_init_angle": 0.3,
              "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
            },
            "_max_episode_length": 500,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_task_name": "pick-place-v2",
          "_task_id": "None",
          "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
        },
        {
          "_env": {
            "_env": {
              "action_scale": 0.01,
              "action_rot_scale": 1.0,
              "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
              "hand_high": "array([0.5, 1. , 0.5])",
              "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
              "mocap_high": "array([0.5, 1. , 0.5])",
              "curr_path_length": 0,
              "seeded_rand_vec": false,
              "_freeze_rand_vec": true,
              "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
              "num_resets": 0,
              "current_seed": "None",
              "obj_init_pos": "None",
              "discrete_goal_space": "None",
              "discrete_goals": [],
              "active_discrete_goal": "None",
              "_partially_observable": true,
              "_constraint_mode": "relative",
              "_constraint_size": 0.03,
              "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              "width": 480,
              "height": 480,
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
              "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
              "frame_skip": 5,
              "observation_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_above": "array([ True,  True,  True,  True])",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "render_mode": "None",
              "camera_name": "None",
              "camera_id": "None",
              "mujoco_renderer": {
                "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
                "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
                "_viewers": {},
                "viewer": "None",
                "default_cam_config": "None",
                "width": 480,
                "height": 480,
                "max_geom": 1000,
                "_vopt": {},
                "camera_id": -1,
                "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
              },
              "_did_see_sim_exception": false,
              "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
              "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
              "_obs_obj_max_len": 14,
              "_set_task_called": true,
              "hand_init_pos": "array([0. , 0.6, 0.2])",
              "_target_pos": "None",
              "_random_reset_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  6
                ],
                "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
                "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
                "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "goal_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  3
                ],
                "low": "array([-0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True])",
                "high": "array([0.1, 0.9, 0.3])",
                "bounded_above": "array([ True,  True,  True])",
                "low_repr": "[-0.1   0.8   0.05]",
                "high_repr": "[0.1 0.9 0.3]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "_last_stable_obs": "None",
              "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
              "_ezpickle_args": [
                "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
                5,
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                0.01,
                1.0
              ],
              "_ezpickle_kwargs": {},
              "init_config": {
                "obj_init_angle": 0.3,
                "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                "hand_init_pos": "array([0. , 0.6, 0.2])"
              },
              "goal": "array([0.1, 0.8, 0.2])",
              "obj_init_angle": 0.3,
              "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
            },
            "_max_episode_length": 500,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_task_name": "pick-place-v2",
          "_task_id": "None",
          "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
        },
        {
          "_env": {
            "_env": {
              "action_scale": 0.01,
              "action_rot_scale": 1.0,
              "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
              "hand_high": "array([0.5, 1. , 0.5])",
              "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
              "mocap_high": "array([0.5, 1. , 0.5])",
              "curr_path_length": 0,
              "seeded_rand_vec": false,
              "_freeze_rand_vec": true,
              "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
              "num_resets": 0,
              "current_seed": "None",
              "obj_init_pos": "None",
              "discrete_goal_space": "None",
              "discrete_goals": [],
              "active_discrete_goal": "None",
              "_partially_observable": true,
              "_constraint_mode": "relative",
              "_constraint_size": 0.03,
              "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              "width": 480,
              "height": 480,
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
              "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
              "frame_skip": 5,
              "observation_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_above": "array([ True,  True,  True,  True])",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "render_mode": "None",
              "camera_name": "None",
              "camera_id": "None",
              "mujoco_renderer": {
                "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
                "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
                "_viewers": {},
                "viewer": "None",
                "default_cam_config": "None",
                "width": 480,
                "height": 480,
                "max_geom": 1000,
                "_vopt": {},
                "camera_id": -1,
                "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
              },
              "_did_see_sim_exception": false,
              "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
              "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
              "_obs_obj_max_len": 14,
              "_set_task_called": true,
              "hand_init_pos": "array([0. , 0.6, 0.2])",
              "_target_pos": "None",
              "_random_reset_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  6
                ],
                "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
                "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
                "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "goal_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  3
                ],
                "low": "array([-0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True])",
                "high": "array([0.1, 0.9, 0.3])",
                "bounded_above": "array([ True,  True,  True])",
                "low_repr": "[-0.1   0.8   0.05]",
                "high_repr": "[0.1 0.9 0.3]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "_last_stable_obs": "None",
              "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
              "_ezpickle_args": [
                "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
                5,
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                0.01,
                1.0
              ],
              "_ezpickle_kwargs": {},
              "init_config": {
                "obj_init_angle": 0.3,
                "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                "hand_init_pos": "array([0. , 0.6, 0.2])"
              },
              "goal": "array([0.1, 0.8, 0.2])",
              "obj_init_angle": 0.3,
              "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
            },
            "_max_episode_length": 500,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_task_name": "pick-place-v2",
          "_task_id": "None",
          "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
        },
        {
          "_env": {
            "_env": {
              "action_scale": 0.01,
              "action_rot_scale": 1.0,
              "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
              "hand_high": "array([0.5, 1. , 0.5])",
              "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
              "mocap_high": "array([0.5, 1. , 0.5])",
              "curr_path_length": 0,
              "seeded_rand_vec": false,
              "_freeze_rand_vec": true,
              "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
              "num_resets": 0,
              "current_seed": "None",
              "obj_init_pos": "None",
              "discrete_goal_space": "None",
              "discrete_goals": [],
              "active_discrete_goal": "None",
              "_partially_observable": true,
              "_constraint_mode": "relative",
              "_constraint_size": 0.03,
              "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              "width": 480,
              "height": 480,
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
              "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
              "frame_skip": 5,
              "observation_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_above": "array([ True,  True,  True,  True])",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "render_mode": "None",
              "camera_name": "None",
              "camera_id": "None",
              "mujoco_renderer": {
                "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
                "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
                "_viewers": {},
                "viewer": "None",
                "default_cam_config": "None",
                "width": 480,
                "height": 480,
                "max_geom": 1000,
                "_vopt": {},
                "camera_id": -1,
                "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
              },
              "_did_see_sim_exception": false,
              "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
              "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
              "_obs_obj_max_len": 14,
              "_set_task_called": true,
              "hand_init_pos": "array([0. , 0.6, 0.2])",
              "_target_pos": "None",
              "_random_reset_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  6
                ],
                "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
                "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
                "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "goal_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  3
                ],
                "low": "array([-0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True])",
                "high": "array([0.1, 0.9, 0.3])",
                "bounded_above": "array([ True,  True,  True])",
                "low_repr": "[-0.1   0.8   0.05]",
                "high_repr": "[0.1 0.9 0.3]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "_last_stable_obs": "None",
              "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
              "_ezpickle_args": [
                "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
                5,
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                0.01,
                1.0
              ],
              "_ezpickle_kwargs": {},
              "init_config": {
                "obj_init_angle": 0.3,
                "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                "hand_init_pos": "array([0. , 0.6, 0.2])"
              },
              "goal": "array([0.1, 0.8, 0.2])",
              "obj_init_angle": 0.3,
              "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
            },
            "_max_episode_length": 500,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_task_name": "pick-place-v2",
          "_task_id": "None",
          "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
        },
        {
          "_env": {
            "_env": {
              "action_scale": 0.01,
              "action_rot_scale": 1.0,
              "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
              "hand_high": "array([0.5, 1. , 0.5])",
              "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
              "mocap_high": "array([0.5, 1. , 0.5])",
              "curr_path_length": 0,
              "seeded_rand_vec": false,
              "_freeze_rand_vec": true,
              "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
              "num_resets": 0,
              "current_seed": "None",
              "obj_init_pos": "None",
              "discrete_goal_space": "None",
              "discrete_goals": [],
              "active_discrete_goal": "None",
              "_partially_observable": true,
              "_constraint_mode": "relative",
              "_constraint_size": 0.03,
              "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              "width": 480,
              "height": 480,
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
              "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
              "frame_skip": 5,
              "observation_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_above": "array([ True,  True,  True,  True])",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "render_mode": "None",
              "camera_name": "None",
              "camera_id": "None",
              "mujoco_renderer": {
                "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
                "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
                "_viewers": {},
                "viewer": "None",
                "default_cam_config": "None",
                "width": 480,
                "height": 480,
                "max_geom": 1000,
                "_vopt": {},
                "camera_id": -1,
                "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
              },
              "_did_see_sim_exception": false,
              "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
              "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
              "_obs_obj_max_len": 14,
              "_set_task_called": true,
              "hand_init_pos": "array([0. , 0.6, 0.2])",
              "_target_pos": "None",
              "_random_reset_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  6
                ],
                "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
                "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
                "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "goal_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  3
                ],
                "low": "array([-0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True])",
                "high": "array([0.1, 0.9, 0.3])",
                "bounded_above": "array([ True,  True,  True])",
                "low_repr": "[-0.1   0.8   0.05]",
                "high_repr": "[0.1 0.9 0.3]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "_last_stable_obs": "None",
              "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
              "_ezpickle_args": [
                "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
                5,
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                0.01,
                1.0
              ],
              "_ezpickle_kwargs": {},
              "init_config": {
                "obj_init_angle": 0.3,
                "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                "hand_init_pos": "array([0. , 0.6, 0.2])"
              },
              "goal": "array([0.1, 0.8, 0.2])",
              "obj_init_angle": 0.3,
              "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
            },
            "_max_episode_length": 500,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_task_name": "pick-place-v2",
          "_task_id": "None",
          "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
        },
        {
          "_env": {
            "_env": {
              "action_scale": 0.01,
              "action_rot_scale": 1.0,
              "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
              "hand_high": "array([0.5, 1. , 0.5])",
              "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
              "mocap_high": "array([0.5, 1. , 0.5])",
              "curr_path_length": 0,
              "seeded_rand_vec": false,
              "_freeze_rand_vec": true,
              "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
              "num_resets": 0,
              "current_seed": "None",
              "obj_init_pos": "None",
              "discrete_goal_space": "None",
              "discrete_goals": [],
              "active_discrete_goal": "None",
              "_partially_observable": true,
              "_constraint_mode": "relative",
              "_constraint_size": 0.03,
              "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              "width": 480,
              "height": 480,
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
              "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
              "frame_skip": 5,
              "observation_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_above": "array([ True,  True,  True,  True])",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "render_mode": "None",
              "camera_name": "None",
              "camera_id": "None",
              "mujoco_renderer": {
                "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
                "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
                "_viewers": {},
                "viewer": "None",
                "default_cam_config": "None",
                "width": 480,
                "height": 480,
                "max_geom": 1000,
                "_vopt": {},
                "camera_id": -1,
                "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
              },
              "_did_see_sim_exception": false,
              "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
              "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
              "_obs_obj_max_len": 14,
              "_set_task_called": true,
              "hand_init_pos": "array([0. , 0.6, 0.2])",
              "_target_pos": "None",
              "_random_reset_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  6
                ],
                "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
                "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
                "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "goal_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  3
                ],
                "low": "array([-0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True])",
                "high": "array([0.1, 0.9, 0.3])",
                "bounded_above": "array([ True,  True,  True])",
                "low_repr": "[-0.1   0.8   0.05]",
                "high_repr": "[0.1 0.9 0.3]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "_last_stable_obs": "None",
              "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
              "_ezpickle_args": [
                "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
                5,
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                0.01,
                1.0
              ],
              "_ezpickle_kwargs": {},
              "init_config": {
                "obj_init_angle": 0.3,
                "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                "hand_init_pos": "array([0. , 0.6, 0.2])"
              },
              "goal": "array([0.1, 0.8, 0.2])",
              "obj_init_angle": 0.3,
              "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
            },
            "_max_episode_length": 500,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_task_name": "pick-place-v2",
          "_task_id": "None",
          "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
        },
        {
          "_env": {
            "_env": {
              "action_scale": 0.01,
              "action_rot_scale": 1.0,
              "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
              "hand_high": "array([0.5, 1. , 0.5])",
              "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
              "mocap_high": "array([0.5, 1. , 0.5])",
              "curr_path_length": 0,
              "seeded_rand_vec": false,
              "_freeze_rand_vec": true,
              "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
              "num_resets": 0,
              "current_seed": "None",
              "obj_init_pos": "None",
              "discrete_goal_space": "None",
              "discrete_goals": [],
              "active_discrete_goal": "None",
              "_partially_observable": true,
              "_constraint_mode": "relative",
              "_constraint_size": 0.03,
              "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              "width": 480,
              "height": 480,
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
              "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
              "frame_skip": 5,
              "observation_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_above": "array([ True,  True,  True,  True])",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "render_mode": "None",
              "camera_name": "None",
              "camera_id": "None",
              "mujoco_renderer": {
                "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
                "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
                "_viewers": {},
                "viewer": "None",
                "default_cam_config": "None",
                "width": 480,
                "height": 480,
                "max_geom": 1000,
                "_vopt": {},
                "camera_id": -1,
                "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
              },
              "_did_see_sim_exception": false,
              "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
              "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
              "_obs_obj_max_len": 14,
              "_set_task_called": true,
              "hand_init_pos": "array([0. , 0.6, 0.2])",
              "_target_pos": "None",
              "_random_reset_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  6
                ],
                "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
                "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
                "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "goal_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  3
                ],
                "low": "array([-0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True])",
                "high": "array([0.1, 0.9, 0.3])",
                "bounded_above": "array([ True,  True,  True])",
                "low_repr": "[-0.1   0.8   0.05]",
                "high_repr": "[0.1 0.9 0.3]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "_last_stable_obs": "None",
              "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
              "_ezpickle_args": [
                "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
                5,
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                0.01,
                1.0
              ],
              "_ezpickle_kwargs": {},
              "init_config": {
                "obj_init_angle": 0.3,
                "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                "hand_init_pos": "array([0. , 0.6, 0.2])"
              },
              "goal": "array([0.1, 0.8, 0.2])",
              "obj_init_angle": 0.3,
              "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
            },
            "_max_episode_length": 500,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_task_name": "pick-place-v2",
          "_task_id": "None",
          "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
        },
        {
          "_env": {
            "_env": {
              "action_scale": 0.01,
              "action_rot_scale": 1.0,
              "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
              "hand_high": "array([0.5, 1. , 0.5])",
              "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
              "mocap_high": "array([0.5, 1. , 0.5])",
              "curr_path_length": 0,
              "seeded_rand_vec": false,
              "_freeze_rand_vec": true,
              "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
              "num_resets": 0,
              "current_seed": "None",
              "obj_init_pos": "None",
              "discrete_goal_space": "None",
              "discrete_goals": [],
              "active_discrete_goal": "None",
              "_partially_observable": true,
              "_constraint_mode": "relative",
              "_constraint_size": 0.03,
              "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              "width": 480,
              "height": 480,
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
              "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
              "frame_skip": 5,
              "observation_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_above": "array([ True,  True,  True,  True])",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "render_mode": "None",
              "camera_name": "None",
              "camera_id": "None",
              "mujoco_renderer": {
                "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
                "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
                "_viewers": {},
                "viewer": "None",
                "default_cam_config": "None",
                "width": 480,
                "height": 480,
                "max_geom": 1000,
                "_vopt": {},
                "camera_id": -1,
                "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
              },
              "_did_see_sim_exception": false,
              "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
              "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
              "_obs_obj_max_len": 14,
              "_set_task_called": true,
              "hand_init_pos": "array([0. , 0.6, 0.2])",
              "_target_pos": "None",
              "_random_reset_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  6
                ],
                "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
                "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
                "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "goal_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  3
                ],
                "low": "array([-0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True])",
                "high": "array([0.1, 0.9, 0.3])",
                "bounded_above": "array([ True,  True,  True])",
                "low_repr": "[-0.1   0.8   0.05]",
                "high_repr": "[0.1 0.9 0.3]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "_last_stable_obs": "None",
              "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
              "_ezpickle_args": [
                "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
                5,
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                0.01,
                1.0
              ],
              "_ezpickle_kwargs": {},
              "init_config": {
                "obj_init_angle": 0.3,
                "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                "hand_init_pos": "array([0. , 0.6, 0.2])"
              },
              "goal": "array([0.1, 0.8, 0.2])",
              "obj_init_angle": 0.3,
              "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
            },
            "_max_episode_length": 500,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_task_name": "pick-place-v2",
          "_task_id": "None",
          "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
        },
        {
          "_env": {
            "_env": {
              "action_scale": 0.01,
              "action_rot_scale": 1.0,
              "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
              "hand_high": "array([0.5, 1. , 0.5])",
              "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
              "mocap_high": "array([0.5, 1. , 0.5])",
              "curr_path_length": 0,
              "seeded_rand_vec": false,
              "_freeze_rand_vec": true,
              "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
              "num_resets": 0,
              "current_seed": "None",
              "obj_init_pos": "None",
              "discrete_goal_space": "None",
              "discrete_goals": [],
              "active_discrete_goal": "None",
              "_partially_observable": true,
              "_constraint_mode": "relative",
              "_constraint_size": 0.03,
              "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              "width": 480,
              "height": 480,
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
              "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
              "frame_skip": 5,
              "observation_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_above": "array([ True,  True,  True,  True])",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "render_mode": "None",
              "camera_name": "None",
              "camera_id": "None",
              "mujoco_renderer": {
                "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
                "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
                "_viewers": {},
                "viewer": "None",
                "default_cam_config": "None",
                "width": 480,
                "height": 480,
                "max_geom": 1000,
                "_vopt": {},
                "camera_id": -1,
                "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
              },
              "_did_see_sim_exception": false,
              "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
              "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
              "_obs_obj_max_len": 14,
              "_set_task_called": true,
              "hand_init_pos": "array([0. , 0.6, 0.2])",
              "_target_pos": "None",
              "_random_reset_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  6
                ],
                "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
                "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
                "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "goal_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  3
                ],
                "low": "array([-0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True])",
                "high": "array([0.1, 0.9, 0.3])",
                "bounded_above": "array([ True,  True,  True])",
                "low_repr": "[-0.1   0.8   0.05]",
                "high_repr": "[0.1 0.9 0.3]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "_last_stable_obs": "None",
              "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
              "_ezpickle_args": [
                "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
                5,
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                0.01,
                1.0
              ],
              "_ezpickle_kwargs": {},
              "init_config": {
                "obj_init_angle": 0.3,
                "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                "hand_init_pos": "array([0. , 0.6, 0.2])"
              },
              "goal": "array([0.1, 0.8, 0.2])",
              "obj_init_angle": 0.3,
              "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
            },
            "_max_episode_length": 500,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_task_name": "pick-place-v2",
          "_task_id": "None",
          "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
        },
        {
          "_env": {
            "_env": {
              "action_scale": 0.01,
              "action_rot_scale": 1.0,
              "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
              "hand_high": "array([0.5, 1. , 0.5])",
              "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
              "mocap_high": "array([0.5, 1. , 0.5])",
              "curr_path_length": 0,
              "seeded_rand_vec": false,
              "_freeze_rand_vec": true,
              "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
              "num_resets": 0,
              "current_seed": "None",
              "obj_init_pos": "None",
              "discrete_goal_space": "None",
              "discrete_goals": [],
              "active_discrete_goal": "None",
              "_partially_observable": true,
              "_constraint_mode": "relative",
              "_constraint_size": 0.03,
              "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              "width": 480,
              "height": 480,
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
              "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
              "frame_skip": 5,
              "observation_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_above": "array([ True,  True,  True,  True])",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "render_mode": "None",
              "camera_name": "None",
              "camera_id": "None",
              "mujoco_renderer": {
                "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
                "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
                "_viewers": {},
                "viewer": "None",
                "default_cam_config": "None",
                "width": 480,
                "height": 480,
                "max_geom": 1000,
                "_vopt": {},
                "camera_id": -1,
                "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
              },
              "_did_see_sim_exception": false,
              "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
              "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
              "_obs_obj_max_len": 14,
              "_set_task_called": true,
              "hand_init_pos": "array([0. , 0.6, 0.2])",
              "_target_pos": "None",
              "_random_reset_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  6
                ],
                "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
                "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
                "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "goal_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  3
                ],
                "low": "array([-0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True])",
                "high": "array([0.1, 0.9, 0.3])",
                "bounded_above": "array([ True,  True,  True])",
                "low_repr": "[-0.1   0.8   0.05]",
                "high_repr": "[0.1 0.9 0.3]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "_last_stable_obs": "None",
              "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
              "_ezpickle_args": [
                "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
                5,
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                0.01,
                1.0
              ],
              "_ezpickle_kwargs": {},
              "init_config": {
                "obj_init_angle": 0.3,
                "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                "hand_init_pos": "array([0. , 0.6, 0.2])"
              },
              "goal": "array([0.1, 0.8, 0.2])",
              "obj_init_angle": 0.3,
              "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
            },
            "_max_episode_length": 500,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_task_name": "pick-place-v2",
          "_task_id": "None",
          "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
        },
        {
          "_env": {
            "_env": {
              "action_scale": 0.01,
              "action_rot_scale": 1.0,
              "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
              "hand_high": "array([0.5, 1. , 0.5])",
              "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
              "mocap_high": "array([0.5, 1. , 0.5])",
              "curr_path_length": 0,
              "seeded_rand_vec": false,
              "_freeze_rand_vec": true,
              "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
              "num_resets": 0,
              "current_seed": "None",
              "obj_init_pos": "None",
              "discrete_goal_space": "None",
              "discrete_goals": [],
              "active_discrete_goal": "None",
              "_partially_observable": true,
              "_constraint_mode": "relative",
              "_constraint_size": 0.03,
              "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              "width": 480,
              "height": 480,
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
              "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
              "frame_skip": 5,
              "observation_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_above": "array([ True,  True,  True,  True])",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "render_mode": "None",
              "camera_name": "None",
              "camera_id": "None",
              "mujoco_renderer": {
                "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
                "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
                "_viewers": {},
                "viewer": "None",
                "default_cam_config": "None",
                "width": 480,
                "height": 480,
                "max_geom": 1000,
                "_vopt": {},
                "camera_id": -1,
                "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
              },
              "_did_see_sim_exception": false,
              "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
              "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
              "_obs_obj_max_len": 14,
              "_set_task_called": true,
              "hand_init_pos": "array([0. , 0.6, 0.2])",
              "_target_pos": "None",
              "_random_reset_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  6
                ],
                "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
                "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
                "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "goal_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  3
                ],
                "low": "array([-0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True])",
                "high": "array([0.1, 0.9, 0.3])",
                "bounded_above": "array([ True,  True,  True])",
                "low_repr": "[-0.1   0.8   0.05]",
                "high_repr": "[0.1 0.9 0.3]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "_last_stable_obs": "None",
              "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
              "_ezpickle_args": [
                "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
                5,
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                0.01,
                1.0
              ],
              "_ezpickle_kwargs": {},
              "init_config": {
                "obj_init_angle": 0.3,
                "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                "hand_init_pos": "array([0. , 0.6, 0.2])"
              },
              "goal": "array([0.1, 0.8, 0.2])",
              "obj_init_angle": 0.3,
              "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
            },
            "_max_episode_length": 500,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_task_name": "pick-place-v2",
          "_task_id": "None",
          "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
        },
        {
          "_env": {
            "_env": {
              "action_scale": 0.01,
              "action_rot_scale": 1.0,
              "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
              "hand_high": "array([0.5, 1. , 0.5])",
              "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
              "mocap_high": "array([0.5, 1. , 0.5])",
              "curr_path_length": 0,
              "seeded_rand_vec": false,
              "_freeze_rand_vec": true,
              "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
              "num_resets": 0,
              "current_seed": "None",
              "obj_init_pos": "None",
              "discrete_goal_space": "None",
              "discrete_goals": [],
              "active_discrete_goal": "None",
              "_partially_observable": true,
              "_constraint_mode": "relative",
              "_constraint_size": 0.03,
              "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              "width": 480,
              "height": 480,
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
              "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
              "frame_skip": 5,
              "observation_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_above": "array([ True,  True,  True,  True])",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "render_mode": "None",
              "camera_name": "None",
              "camera_id": "None",
              "mujoco_renderer": {
                "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
                "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
                "_viewers": {},
                "viewer": "None",
                "default_cam_config": "None",
                "width": 480,
                "height": 480,
                "max_geom": 1000,
                "_vopt": {},
                "camera_id": -1,
                "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
              },
              "_did_see_sim_exception": false,
              "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
              "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
              "_obs_obj_max_len": 14,
              "_set_task_called": true,
              "hand_init_pos": "array([0. , 0.6, 0.2])",
              "_target_pos": "None",
              "_random_reset_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  6
                ],
                "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
                "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
                "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "goal_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  3
                ],
                "low": "array([-0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True])",
                "high": "array([0.1, 0.9, 0.3])",
                "bounded_above": "array([ True,  True,  True])",
                "low_repr": "[-0.1   0.8   0.05]",
                "high_repr": "[0.1 0.9 0.3]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "_last_stable_obs": "None",
              "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
              "_ezpickle_args": [
                "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
                5,
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                0.01,
                1.0
              ],
              "_ezpickle_kwargs": {},
              "init_config": {
                "obj_init_angle": 0.3,
                "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                "hand_init_pos": "array([0. , 0.6, 0.2])"
              },
              "goal": "array([0.1, 0.8, 0.2])",
              "obj_init_angle": 0.3,
              "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
            },
            "_max_episode_length": 500,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_task_name": "pick-place-v2",
          "_task_id": "None",
          "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
        },
        {
          "_env": {
            "_env": {
              "action_scale": 0.01,
              "action_rot_scale": 1.0,
              "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
              "hand_high": "array([0.5, 1. , 0.5])",
              "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
              "mocap_high": "array([0.5, 1. , 0.5])",
              "curr_path_length": 0,
              "seeded_rand_vec": false,
              "_freeze_rand_vec": true,
              "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
              "num_resets": 0,
              "current_seed": "None",
              "obj_init_pos": "None",
              "discrete_goal_space": "None",
              "discrete_goals": [],
              "active_discrete_goal": "None",
              "_partially_observable": true,
              "_constraint_mode": "relative",
              "_constraint_size": 0.03,
              "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              "width": 480,
              "height": 480,
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
              "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
              "frame_skip": 5,
              "observation_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_above": "array([ True,  True,  True,  True])",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "render_mode": "None",
              "camera_name": "None",
              "camera_id": "None",
              "mujoco_renderer": {
                "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
                "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
                "_viewers": {},
                "viewer": "None",
                "default_cam_config": "None",
                "width": 480,
                "height": 480,
                "max_geom": 1000,
                "_vopt": {},
                "camera_id": -1,
                "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
              },
              "_did_see_sim_exception": false,
              "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
              "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
              "_obs_obj_max_len": 14,
              "_set_task_called": true,
              "hand_init_pos": "array([0. , 0.6, 0.2])",
              "_target_pos": "None",
              "_random_reset_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  6
                ],
                "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
                "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
                "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "goal_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  3
                ],
                "low": "array([-0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True])",
                "high": "array([0.1, 0.9, 0.3])",
                "bounded_above": "array([ True,  True,  True])",
                "low_repr": "[-0.1   0.8   0.05]",
                "high_repr": "[0.1 0.9 0.3]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "_last_stable_obs": "None",
              "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
              "_ezpickle_args": [
                "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
                5,
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                0.01,
                1.0
              ],
              "_ezpickle_kwargs": {},
              "init_config": {
                "obj_init_angle": 0.3,
                "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                "hand_init_pos": "array([0. , 0.6, 0.2])"
              },
              "goal": "array([0.1, 0.8, 0.2])",
              "obj_init_angle": 0.3,
              "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
            },
            "_max_episode_length": 500,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_task_name": "pick-place-v2",
          "_task_id": "None",
          "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
        },
        {
          "_env": {
            "_env": {
              "action_scale": 0.01,
              "action_rot_scale": 1.0,
              "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
              "hand_high": "array([0.5, 1. , 0.5])",
              "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
              "mocap_high": "array([0.5, 1. , 0.5])",
              "curr_path_length": 0,
              "seeded_rand_vec": false,
              "_freeze_rand_vec": true,
              "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
              "num_resets": 0,
              "current_seed": "None",
              "obj_init_pos": "None",
              "discrete_goal_space": "None",
              "discrete_goals": [],
              "active_discrete_goal": "None",
              "_partially_observable": true,
              "_constraint_mode": "relative",
              "_constraint_size": 0.03,
              "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              "width": 480,
              "height": 480,
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
              "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
              "frame_skip": 5,
              "observation_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_above": "array([ True,  True,  True,  True])",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "render_mode": "None",
              "camera_name": "None",
              "camera_id": "None",
              "mujoco_renderer": {
                "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
                "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
                "_viewers": {},
                "viewer": "None",
                "default_cam_config": "None",
                "width": 480,
                "height": 480,
                "max_geom": 1000,
                "_vopt": {},
                "camera_id": -1,
                "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
              },
              "_did_see_sim_exception": false,
              "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
              "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
              "_obs_obj_max_len": 14,
              "_set_task_called": true,
              "hand_init_pos": "array([0. , 0.6, 0.2])",
              "_target_pos": "None",
              "_random_reset_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  6
                ],
                "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
                "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
                "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "goal_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  3
                ],
                "low": "array([-0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True])",
                "high": "array([0.1, 0.9, 0.3])",
                "bounded_above": "array([ True,  True,  True])",
                "low_repr": "[-0.1   0.8   0.05]",
                "high_repr": "[0.1 0.9 0.3]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "_last_stable_obs": "None",
              "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
              "_ezpickle_args": [
                "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
                5,
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                0.01,
                1.0
              ],
              "_ezpickle_kwargs": {},
              "init_config": {
                "obj_init_angle": 0.3,
                "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                "hand_init_pos": "array([0. , 0.6, 0.2])"
              },
              "goal": "array([0.1, 0.8, 0.2])",
              "obj_init_angle": 0.3,
              "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
            },
            "_max_episode_length": 500,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_task_name": "pick-place-v2",
          "_task_id": "None",
          "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
        },
        {
          "_env": {
            "_env": {
              "action_scale": 0.01,
              "action_rot_scale": 1.0,
              "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
              "hand_high": "array([0.5, 1. , 0.5])",
              "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
              "mocap_high": "array([0.5, 1. , 0.5])",
              "curr_path_length": 0,
              "seeded_rand_vec": false,
              "_freeze_rand_vec": true,
              "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
              "num_resets": 0,
              "current_seed": "None",
              "obj_init_pos": "None",
              "discrete_goal_space": "None",
              "discrete_goals": [],
              "active_discrete_goal": "None",
              "_partially_observable": true,
              "_constraint_mode": "relative",
              "_constraint_size": 0.03,
              "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              "width": 480,
              "height": 480,
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
              "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
              "frame_skip": 5,
              "observation_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_above": "array([ True,  True,  True,  True])",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "render_mode": "None",
              "camera_name": "None",
              "camera_id": "None",
              "mujoco_renderer": {
                "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
                "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
                "_viewers": {},
                "viewer": "None",
                "default_cam_config": "None",
                "width": 480,
                "height": 480,
                "max_geom": 1000,
                "_vopt": {},
                "camera_id": -1,
                "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
              },
              "_did_see_sim_exception": false,
              "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
              "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
              "_obs_obj_max_len": 14,
              "_set_task_called": true,
              "hand_init_pos": "array([0. , 0.6, 0.2])",
              "_target_pos": "None",
              "_random_reset_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  6
                ],
                "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
                "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
                "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "goal_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  3
                ],
                "low": "array([-0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True])",
                "high": "array([0.1, 0.9, 0.3])",
                "bounded_above": "array([ True,  True,  True])",
                "low_repr": "[-0.1   0.8   0.05]",
                "high_repr": "[0.1 0.9 0.3]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "_last_stable_obs": "None",
              "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
              "_ezpickle_args": [
                "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
                5,
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                0.01,
                1.0
              ],
              "_ezpickle_kwargs": {},
              "init_config": {
                "obj_init_angle": 0.3,
                "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                "hand_init_pos": "array([0. , 0.6, 0.2])"
              },
              "goal": "array([0.1, 0.8, 0.2])",
              "obj_init_angle": 0.3,
              "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
            },
            "_max_episode_length": 500,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_task_name": "pick-place-v2",
          "_task_id": "None",
          "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
        },
        {
          "_env": {
            "_env": {
              "action_scale": 0.01,
              "action_rot_scale": 1.0,
              "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
              "hand_high": "array([0.5, 1. , 0.5])",
              "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
              "mocap_high": "array([0.5, 1. , 0.5])",
              "curr_path_length": 0,
              "seeded_rand_vec": false,
              "_freeze_rand_vec": true,
              "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
              "num_resets": 0,
              "current_seed": "None",
              "obj_init_pos": "None",
              "discrete_goal_space": "None",
              "discrete_goals": [],
              "active_discrete_goal": "None",
              "_partially_observable": true,
              "_constraint_mode": "relative",
              "_constraint_size": 0.03,
              "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              "width": 480,
              "height": 480,
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
              "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
              "frame_skip": 5,
              "observation_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_above": "array([ True,  True,  True,  True])",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "render_mode": "None",
              "camera_name": "None",
              "camera_id": "None",
              "mujoco_renderer": {
                "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
                "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
                "_viewers": {},
                "viewer": "None",
                "default_cam_config": "None",
                "width": 480,
                "height": 480,
                "max_geom": 1000,
                "_vopt": {},
                "camera_id": -1,
                "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
              },
              "_did_see_sim_exception": false,
              "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
              "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
              "_obs_obj_max_len": 14,
              "_set_task_called": true,
              "hand_init_pos": "array([0. , 0.6, 0.2])",
              "_target_pos": "None",
              "_random_reset_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  6
                ],
                "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
                "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
                "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "goal_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  3
                ],
                "low": "array([-0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True])",
                "high": "array([0.1, 0.9, 0.3])",
                "bounded_above": "array([ True,  True,  True])",
                "low_repr": "[-0.1   0.8   0.05]",
                "high_repr": "[0.1 0.9 0.3]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "_last_stable_obs": "None",
              "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
              "_ezpickle_args": [
                "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
                5,
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                0.01,
                1.0
              ],
              "_ezpickle_kwargs": {},
              "init_config": {
                "obj_init_angle": 0.3,
                "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                "hand_init_pos": "array([0. , 0.6, 0.2])"
              },
              "goal": "array([0.1, 0.8, 0.2])",
              "obj_init_angle": 0.3,
              "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
            },
            "_max_episode_length": 500,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_task_name": "pick-place-v2",
          "_task_id": "None",
          "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
        },
        {
          "_env": {
            "_env": {
              "action_scale": 0.01,
              "action_rot_scale": 1.0,
              "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
              "hand_high": "array([0.5, 1. , 0.5])",
              "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
              "mocap_high": "array([0.5, 1. , 0.5])",
              "curr_path_length": 0,
              "seeded_rand_vec": false,
              "_freeze_rand_vec": true,
              "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
              "num_resets": 0,
              "current_seed": "None",
              "obj_init_pos": "None",
              "discrete_goal_space": "None",
              "discrete_goals": [],
              "active_discrete_goal": "None",
              "_partially_observable": true,
              "_constraint_mode": "relative",
              "_constraint_size": 0.03,
              "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              "width": 480,
              "height": 480,
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
              "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
              "frame_skip": 5,
              "observation_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_above": "array([ True,  True,  True,  True])",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "render_mode": "None",
              "camera_name": "None",
              "camera_id": "None",
              "mujoco_renderer": {
                "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
                "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
                "_viewers": {},
                "viewer": "None",
                "default_cam_config": "None",
                "width": 480,
                "height": 480,
                "max_geom": 1000,
                "_vopt": {},
                "camera_id": -1,
                "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
              },
              "_did_see_sim_exception": false,
              "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
              "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
              "_obs_obj_max_len": 14,
              "_set_task_called": true,
              "hand_init_pos": "array([0. , 0.6, 0.2])",
              "_target_pos": "None",
              "_random_reset_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  6
                ],
                "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
                "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
                "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "goal_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  3
                ],
                "low": "array([-0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True])",
                "high": "array([0.1, 0.9, 0.3])",
                "bounded_above": "array([ True,  True,  True])",
                "low_repr": "[-0.1   0.8   0.05]",
                "high_repr": "[0.1 0.9 0.3]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "_last_stable_obs": "None",
              "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
              "_ezpickle_args": [
                "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
                5,
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                0.01,
                1.0
              ],
              "_ezpickle_kwargs": {},
              "init_config": {
                "obj_init_angle": 0.3,
                "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                "hand_init_pos": "array([0. , 0.6, 0.2])"
              },
              "goal": "array([0.1, 0.8, 0.2])",
              "obj_init_angle": 0.3,
              "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
            },
            "_max_episode_length": 500,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_task_name": "pick-place-v2",
          "_task_id": "None",
          "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
        },
        {
          "_env": {
            "_env": {
              "action_scale": 0.01,
              "action_rot_scale": 1.0,
              "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
              "hand_high": "array([0.5, 1. , 0.5])",
              "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
              "mocap_high": "array([0.5, 1. , 0.5])",
              "curr_path_length": 0,
              "seeded_rand_vec": false,
              "_freeze_rand_vec": true,
              "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
              "num_resets": 0,
              "current_seed": "None",
              "obj_init_pos": "None",
              "discrete_goal_space": "None",
              "discrete_goals": [],
              "active_discrete_goal": "None",
              "_partially_observable": true,
              "_constraint_mode": "relative",
              "_constraint_size": 0.03,
              "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              "width": 480,
              "height": 480,
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
              "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
              "frame_skip": 5,
              "observation_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_above": "array([ True,  True,  True,  True])",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "render_mode": "None",
              "camera_name": "None",
              "camera_id": "None",
              "mujoco_renderer": {
                "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
                "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
                "_viewers": {},
                "viewer": "None",
                "default_cam_config": "None",
                "width": 480,
                "height": 480,
                "max_geom": 1000,
                "_vopt": {},
                "camera_id": -1,
                "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
              },
              "_did_see_sim_exception": false,
              "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
              "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
              "_obs_obj_max_len": 14,
              "_set_task_called": true,
              "hand_init_pos": "array([0. , 0.6, 0.2])",
              "_target_pos": "None",
              "_random_reset_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  6
                ],
                "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
                "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
                "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "goal_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  3
                ],
                "low": "array([-0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True])",
                "high": "array([0.1, 0.9, 0.3])",
                "bounded_above": "array([ True,  True,  True])",
                "low_repr": "[-0.1   0.8   0.05]",
                "high_repr": "[0.1 0.9 0.3]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "_last_stable_obs": "None",
              "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
              "_ezpickle_args": [
                "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
                5,
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                0.01,
                1.0
              ],
              "_ezpickle_kwargs": {},
              "init_config": {
                "obj_init_angle": 0.3,
                "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                "hand_init_pos": "array([0. , 0.6, 0.2])"
              },
              "goal": "array([0.1, 0.8, 0.2])",
              "obj_init_angle": 0.3,
              "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
            },
            "_max_episode_length": 500,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_task_name": "pick-place-v2",
          "_task_id": "None",
          "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
        },
        {
          "_env": {
            "_env": {
              "action_scale": 0.01,
              "action_rot_scale": 1.0,
              "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
              "hand_high": "array([0.5, 1. , 0.5])",
              "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
              "mocap_high": "array([0.5, 1. , 0.5])",
              "curr_path_length": 0,
              "seeded_rand_vec": false,
              "_freeze_rand_vec": true,
              "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
              "num_resets": 0,
              "current_seed": "None",
              "obj_init_pos": "None",
              "discrete_goal_space": "None",
              "discrete_goals": [],
              "active_discrete_goal": "None",
              "_partially_observable": true,
              "_constraint_mode": "relative",
              "_constraint_size": 0.03,
              "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              "width": 480,
              "height": 480,
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
              "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
              "frame_skip": 5,
              "observation_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_above": "array([ True,  True,  True,  True])",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "render_mode": "None",
              "camera_name": "None",
              "camera_id": "None",
              "mujoco_renderer": {
                "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
                "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
                "_viewers": {},
                "viewer": "None",
                "default_cam_config": "None",
                "width": 480,
                "height": 480,
                "max_geom": 1000,
                "_vopt": {},
                "camera_id": -1,
                "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
              },
              "_did_see_sim_exception": false,
              "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
              "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
              "_obs_obj_max_len": 14,
              "_set_task_called": true,
              "hand_init_pos": "array([0. , 0.6, 0.2])",
              "_target_pos": "None",
              "_random_reset_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  6
                ],
                "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
                "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
                "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "goal_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  3
                ],
                "low": "array([-0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True])",
                "high": "array([0.1, 0.9, 0.3])",
                "bounded_above": "array([ True,  True,  True])",
                "low_repr": "[-0.1   0.8   0.05]",
                "high_repr": "[0.1 0.9 0.3]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "_last_stable_obs": "None",
              "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
              "_ezpickle_args": [
                "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
                5,
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                0.01,
                1.0
              ],
              "_ezpickle_kwargs": {},
              "init_config": {
                "obj_init_angle": 0.3,
                "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                "hand_init_pos": "array([0. , 0.6, 0.2])"
              },
              "goal": "array([0.1, 0.8, 0.2])",
              "obj_init_angle": 0.3,
              "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
            },
            "_max_episode_length": 500,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_task_name": "pick-place-v2",
          "_task_id": "None",
          "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
        },
        {
          "_env": {
            "_env": {
              "action_scale": 0.01,
              "action_rot_scale": 1.0,
              "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
              "hand_high": "array([0.5, 1. , 0.5])",
              "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
              "mocap_high": "array([0.5, 1. , 0.5])",
              "curr_path_length": 0,
              "seeded_rand_vec": false,
              "_freeze_rand_vec": true,
              "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
              "num_resets": 0,
              "current_seed": "None",
              "obj_init_pos": "None",
              "discrete_goal_space": "None",
              "discrete_goals": [],
              "active_discrete_goal": "None",
              "_partially_observable": true,
              "_constraint_mode": "relative",
              "_constraint_size": 0.03,
              "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              "width": 480,
              "height": 480,
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
              "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
              "frame_skip": 5,
              "observation_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_above": "array([ True,  True,  True,  True])",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "render_mode": "None",
              "camera_name": "None",
              "camera_id": "None",
              "mujoco_renderer": {
                "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
                "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
                "_viewers": {},
                "viewer": "None",
                "default_cam_config": "None",
                "width": 480,
                "height": 480,
                "max_geom": 1000,
                "_vopt": {},
                "camera_id": -1,
                "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
              },
              "_did_see_sim_exception": false,
              "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
              "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
              "_obs_obj_max_len": 14,
              "_set_task_called": true,
              "hand_init_pos": "array([0. , 0.6, 0.2])",
              "_target_pos": "None",
              "_random_reset_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  6
                ],
                "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
                "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
                "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "goal_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  3
                ],
                "low": "array([-0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True])",
                "high": "array([0.1, 0.9, 0.3])",
                "bounded_above": "array([ True,  True,  True])",
                "low_repr": "[-0.1   0.8   0.05]",
                "high_repr": "[0.1 0.9 0.3]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "_last_stable_obs": "None",
              "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
              "_ezpickle_args": [
                "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
                5,
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                0.01,
                1.0
              ],
              "_ezpickle_kwargs": {},
              "init_config": {
                "obj_init_angle": 0.3,
                "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                "hand_init_pos": "array([0. , 0.6, 0.2])"
              },
              "goal": "array([0.1, 0.8, 0.2])",
              "obj_init_angle": 0.3,
              "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
            },
            "_max_episode_length": 500,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_task_name": "pick-place-v2",
          "_task_id": "None",
          "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
        },
        {
          "_env": {
            "_env": {
              "action_scale": 0.01,
              "action_rot_scale": 1.0,
              "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
              "hand_high": "array([0.5, 1. , 0.5])",
              "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
              "mocap_high": "array([0.5, 1. , 0.5])",
              "curr_path_length": 0,
              "seeded_rand_vec": false,
              "_freeze_rand_vec": true,
              "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
              "num_resets": 0,
              "current_seed": "None",
              "obj_init_pos": "None",
              "discrete_goal_space": "None",
              "discrete_goals": [],
              "active_discrete_goal": "None",
              "_partially_observable": true,
              "_constraint_mode": "relative",
              "_constraint_size": 0.03,
              "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              "width": 480,
              "height": 480,
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
              "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
              "frame_skip": 5,
              "observation_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_above": "array([ True,  True,  True,  True])",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "render_mode": "None",
              "camera_name": "None",
              "camera_id": "None",
              "mujoco_renderer": {
                "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
                "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
                "_viewers": {},
                "viewer": "None",
                "default_cam_config": "None",
                "width": 480,
                "height": 480,
                "max_geom": 1000,
                "_vopt": {},
                "camera_id": -1,
                "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
              },
              "_did_see_sim_exception": false,
              "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
              "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
              "_obs_obj_max_len": 14,
              "_set_task_called": true,
              "hand_init_pos": "array([0. , 0.6, 0.2])",
              "_target_pos": "None",
              "_random_reset_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  6
                ],
                "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
                "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
                "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "goal_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  3
                ],
                "low": "array([-0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True])",
                "high": "array([0.1, 0.9, 0.3])",
                "bounded_above": "array([ True,  True,  True])",
                "low_repr": "[-0.1   0.8   0.05]",
                "high_repr": "[0.1 0.9 0.3]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "_last_stable_obs": "None",
              "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
              "_ezpickle_args": [
                "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
                5,
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                0.01,
                1.0
              ],
              "_ezpickle_kwargs": {},
              "init_config": {
                "obj_init_angle": 0.3,
                "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                "hand_init_pos": "array([0. , 0.6, 0.2])"
              },
              "goal": "array([0.1, 0.8, 0.2])",
              "obj_init_angle": 0.3,
              "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
            },
            "_max_episode_length": 500,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_task_name": "pick-place-v2",
          "_task_id": "None",
          "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
        },
        {
          "_env": {
            "_env": {
              "action_scale": 0.01,
              "action_rot_scale": 1.0,
              "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
              "hand_high": "array([0.5, 1. , 0.5])",
              "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
              "mocap_high": "array([0.5, 1. , 0.5])",
              "curr_path_length": 0,
              "seeded_rand_vec": false,
              "_freeze_rand_vec": true,
              "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
              "num_resets": 0,
              "current_seed": "None",
              "obj_init_pos": "None",
              "discrete_goal_space": "None",
              "discrete_goals": [],
              "active_discrete_goal": "None",
              "_partially_observable": true,
              "_constraint_mode": "relative",
              "_constraint_size": 0.03,
              "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              "width": 480,
              "height": 480,
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
              "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
              "frame_skip": 5,
              "observation_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_above": "array([ True,  True,  True,  True])",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "render_mode": "None",
              "camera_name": "None",
              "camera_id": "None",
              "mujoco_renderer": {
                "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
                "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
                "_viewers": {},
                "viewer": "None",
                "default_cam_config": "None",
                "width": 480,
                "height": 480,
                "max_geom": 1000,
                "_vopt": {},
                "camera_id": -1,
                "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
              },
              "_did_see_sim_exception": false,
              "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
              "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
              "_obs_obj_max_len": 14,
              "_set_task_called": true,
              "hand_init_pos": "array([0. , 0.6, 0.2])",
              "_target_pos": "None",
              "_random_reset_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  6
                ],
                "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
                "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
                "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "goal_space": {
                "dtype": "dtype('float64')",
                "_shape": [
                  3
                ],
                "low": "array([-0.1 ,  0.8 ,  0.05])",
                "bounded_below": "array([ True,  True,  True])",
                "high": "array([0.1, 0.9, 0.3])",
                "bounded_above": "array([ True,  True,  True])",
                "low_repr": "[-0.1   0.8   0.05]",
                "high_repr": "[0.1 0.9 0.3]",
                "_np_random": "None",
                "$type": "gymnasium.spaces.box.Box"
              },
              "_last_stable_obs": "None",
              "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
              "_ezpickle_args": [
                "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
                5,
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                [
                  -0.5,
                  0.4,
                  0.05
                ],
                [
                  0.5,
                  1,
                  0.5
                ],
                0.01,
                1.0
              ],
              "_ezpickle_kwargs": {},
              "init_config": {
                "obj_init_angle": 0.3,
                "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                "hand_init_pos": "array([0. , 0.6, 0.2])"
              },
              "goal": "array([0.1, 0.8, 0.2])",
              "obj_init_angle": 0.3,
              "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
            },
            "_max_episode_length": 500,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                "_shape": [
                  45
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_task_name": "pick-place-v2",
          "_task_id": "None",
          "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
        }
      ],
      "_all_workers": {
        "0": "Actor(SamplerWorker, 6725af85310cea963577c18701000000)",
        "1": "Actor(SamplerWorker, 6fc93f00876f7d6a4c67f8b401000000)",
        "2": "Actor(SamplerWorker, 16eb3a290d856dc83864160f01000000)",
        "3": "Actor(SamplerWorker, 01fb5c5675e1c584ad8c269e01000000)",
        "4": "Actor(SamplerWorker, 6ce2c3ed36e59bb65770887501000000)",
        "5": "Actor(SamplerWorker, 8ad982a403f7aaa691eea09301000000)",
        "6": "Actor(SamplerWorker, f72a323ca8e414a880d61abd01000000)",
        "7": "Actor(SamplerWorker, 3d858962cf49ca4153ab625801000000)",
        "8": "Actor(SamplerWorker, a5c225d81e5cf4d4922ced6a01000000)",
        "9": "Actor(SamplerWorker, 48cde7773be576139ac8b2e601000000)",
        "10": "Actor(SamplerWorker, af7c0383e90dff7c65db0bb501000000)",
        "11": "Actor(SamplerWorker, a4715a9af13f870e0424e02101000000)",
        "12": "Actor(SamplerWorker, e59d607864777a901eb1c50e01000000)",
        "13": "Actor(SamplerWorker, df309c9d95860648a18e7f2a01000000)",
        "14": "Actor(SamplerWorker, d54d136a6af26cf18a149f2801000000)",
        "15": "Actor(SamplerWorker, 2bdf07d3839205d40f38857801000000)",
        "16": "Actor(SamplerWorker, 5759d8abf46415d83482715601000000)",
        "17": "Actor(SamplerWorker, db4d2684e59e21de3d879c6b01000000)",
        "18": "Actor(SamplerWorker, 177cab067c255723ec01e19601000000)",
        "19": "Actor(SamplerWorker, 9950f76211d73eee1bc3228a01000000)",
        "20": "Actor(SamplerWorker, 4a999b0f05d4d730e083ef9101000000)",
        "21": "Actor(SamplerWorker, ba96e4f9eae45f328a1058a001000000)",
        "22": "Actor(SamplerWorker, 2994438d375ec4574f6c358801000000)",
        "23": "Actor(SamplerWorker, 2bae10335b4db72e6418763101000000)",
        "24": "Actor(SamplerWorker, 10558b4da737448d73aa8b5001000000)"
      },
      "_workers_started": true,
      "total_env_steps": 0,
      "$type": "garage.sampler.ray_sampler.RaySampler"
    },
    "max_episode_length": 500,
    "_meta_evaluator": {
      "_test_task_sampler": {
        "_env_constructor": {
          "$typename": "garage.envs.metaworld_set_task_env.MetaWorldSetTaskEnv"
        },
        "_env": {
          "_constructed_from_benchmark": true,
          "_benchmark": {
            "constraint_mode": "relative",
            "constraint_size": 0.03,
            "_train_classes": {
              "pick-place-v2": {
                "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
              }
            },
            "_test_classes": {
              "pick-place-v2": {
                "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
              }
            },
            "_train_tasks": [
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              }
            ],
            "_test_tasks": [
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              },
              {
                "$type": "metaworld_constrained.types.Task"
              }
            ],
            "$type": "metaworld_constrained.ML1"
          },
          "_kind": "test",
          "_wrapper": "None",
          "_add_env_onehot": false,
          "_envs": {
            "pick-place-v2": {
              "_env": {
                "_env": {
                  "action_scale": 0.01,
                  "action_rot_scale": 1.0,
                  "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                  "hand_high": "array([0.5, 1. , 0.5])",
                  "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                  "mocap_high": "array([0.5, 1. , 0.5])",
                  "curr_path_length": 0,
                  "seeded_rand_vec": false,
                  "_freeze_rand_vec": true,
                  "_last_rand_vec": "array([ 0.04458304,  0.6176549 ,  0.02      , -0.09604498,  0.8860237 ,\n        0.18972595, -0.02573097,  0.7518393 ,  0.02      ])",
                  "num_resets": 0,
                  "current_seed": "None",
                  "obj_init_pos": "array([0.04458304, 0.6176549 , 0.02      ])",
                  "discrete_goal_space": "None",
                  "discrete_goals": [],
                  "active_discrete_goal": "None",
                  "_partially_observable": true,
                  "_constraint_mode": "relative",
                  "_constraint_size": 0.03,
                  "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
                  "width": 480,
                  "height": 480,
                  "model": "<mujoco._structs.MjModel object at 0x7f018bdc9130>",
                  "data": "<mujoco._structs.MjData object at 0x7f0179e155f0>",
                  "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
                  "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
                  "frame_skip": 5,
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "_shape": [
                      45
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                    "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                    "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                    "_np_random": "None",
                    "$type": "gymnasium.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gymnasium.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "camera_name": "None",
                  "camera_id": "None",
                  "mujoco_renderer": {
                    "model": "<mujoco._structs.MjModel object at 0x7f018bdc9130>",
                    "data": "<mujoco._structs.MjData object at 0x7f0179e155f0>",
                    "_viewers": {},
                    "viewer": "None",
                    "default_cam_config": "None",
                    "width": 480,
                    "height": 480,
                    "max_geom": 1000,
                    "_vopt": {},
                    "camera_id": -1,
                    "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
                  },
                  "_did_see_sim_exception": false,
                  "init_left_pad": "array([0.00455658, 0.64733402, 0.19452415])",
                  "init_right_pad": "array([0.00774813, 0.55304542, 0.1940782 ])",
                  "_obs_obj_max_len": 14,
                  "_set_task_called": true,
                  "hand_init_pos": "array([0. , 0.6, 0.2])",
                  "_target_pos": "array([-0.09604498,  0.8860237 ,  0.18972595])",
                  "_random_reset_space": {
                    "dtype": "dtype('float64')",
                    "_shape": [
                      6
                    ],
                    "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
                    "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                    "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
                    "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                    "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
                    "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
                    "_np_random": "None",
                    "$type": "gymnasium.spaces.box.Box"
                  },
                  "goal_space": {
                    "dtype": "dtype('float64')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-0.1 ,  0.8 ,  0.05])",
                    "bounded_below": "array([ True,  True,  True])",
                    "high": "array([0.1, 0.9, 0.3])",
                    "bounded_above": "array([ True,  True,  True])",
                    "low_repr": "[-0.1   0.8   0.05]",
                    "high_repr": "[0.1 0.9 0.3]",
                    "_np_random": "None",
                    "$type": "gymnasium.spaces.box.Box"
                  },
                  "_last_stable_obs": "None",
                  "_prev_obs": "array([ 0.00615235,  0.6001898 ,  0.19430117,  1.        ,  0.04458304,\n        0.6176549 ,  0.02      ,  0.        ,  0.        ,  0.        ,\n        1.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        , -0.02573097,  0.7518393 ,\n        0.02993593])",
                  "_ezpickle_args": [
                    "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
                    5,
                    [
                      -0.5,
                      0.4,
                      0.05
                    ],
                    [
                      0.5,
                      1,
                      0.5
                    ],
                    [
                      -0.5,
                      0.4,
                      0.05
                    ],
                    [
                      0.5,
                      1,
                      0.5
                    ],
                    0.01,
                    1.0
                  ],
                  "_ezpickle_kwargs": {},
                  "init_config": {
                    "obj_init_angle": 0.3,
                    "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                    "hand_init_pos": "array([0. , 0.6, 0.2])"
                  },
                  "goal": "array([0.1, 0.8, 0.2])",
                  "obj_init_angle": 0.3,
                  "init_tcp": "array([0.00600364, 0.60047618, 0.14935032])",
                  "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                },
                "_max_episode_length": 500,
                "_render_modes": [
                  "human",
                  "rgb_array",
                  "depth_array"
                ],
                "_step_cnt": 0,
                "_visualize": false,
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_shape": [
                    4
                  ],
                  "low": "array([-1., -1., -1., -1.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                  "_shape": [
                    45
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
                  "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                  "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 500,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
                    "_shape": [
                      45
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
                    "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
                    "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "_env_info": "None",
                "$type": "garage.envs.gym_env.GymEnv"
              },
              "_task_name": "pick-place-v2",
              "_task_id": "None",
              "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
            }
          },
          "_current_task": {
            "$type": "metaworld_constrained.types.Task"
          },
          "_inner_tasks": [
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            },
            {
              "$type": "metaworld_constrained.types.Task"
            }
          ],
          "_classes": {
            "pick-place-v2": {
              "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
            }
          },
          "_tasks_by_env": {
            "pick-place-v2": [
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              },
              {
                "kind": "test",
                "benchmark": {
                  "constraint_mode": "relative",
                  "constraint_size": 0.03,
                  "_train_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_test_classes": {
                    "pick-place-v2": {
                      "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    }
                  },
                  "_train_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "_test_tasks": [
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    },
                    {
                      "$type": "metaworld_constrained.types.Task"
                    }
                  ],
                  "$type": "metaworld_constrained.ML1"
                },
                "add_env_onehot": false,
                "inner": {
                  "$type": "metaworld_constrained.types.Task"
                }
              }
            ]
          },
          "_env_list": [
            "pick-place-v2"
          ],
          "_next_env": 0,
          "_next_task_index": 0,
          "_task_indices": "None",
          "_render_mode": "None",
          "_constructor_args": {
            "constraint_mode": "relative",
            "constraint_size": 0.03
          },
          "_tasks": [],
          "$type": "garage.envs.metaworld_set_task_env.MetaWorldSetTaskEnv"
        },
        "_wrapper": "None",
        "_constructor_args": {
          "constructor_args": {
            "constraint_mode": "relative",
            "constraint_size": 0.03
          }
        },
        "$type": "garage.experiment.task_sampler.SetTaskSampler"
      },
      "_worker_class": {
        "$typename": "garage.sampler.default_worker.DefaultWorker"
      },
      "_worker_args": {},
      "_n_test_tasks": 10,
      "_n_test_episodes": 10,
      "_n_exploration_eps": 10,
      "_eval_itr": 0,
      "_prefix": "MetaTest",
      "_test_task_names": "None",
      "_test_sampler": "None",
      "_max_episode_length": "None",
      "_w_and_b": true,
      "$type": "garage.experiment.meta_evaluator.MetaEvaluator"
    },
    "_policy": {
      "training": true,
      "_parameters": {
        "lagrangian": {
          "$type": "torch.nn.parameter.Parameter"
        }
      },
      "_buffers": {},
      "_non_persistent_buffers_set": [],
      "_backward_hooks": {},
      "_forward_hooks": {},
      "_forward_pre_hooks": {},
      "_state_dict_hooks": {},
      "_load_state_dict_pre_hooks": {},
      "_modules": {
        "_module": {
          "training": true,
          "_parameters": {
            "_log_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            },
            "max_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_shared_mean_log_std_network": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 45.0,
                          "out_features": 128,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f01609a05e0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 128,
                          "out_features": 128,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f01609a05e0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 128,
                          "out_features": 4.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f01609a05e0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 128,
                          "out_features": 4.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f01609a05e0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
            }
          },
          "_input_dim": 45.0,
          "_hidden_sizes": [
            128,
            128
          ],
          "_action_dim": 4.0,
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 0.5,
          "_max_std": 1.5,
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f01609a05e0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f01609a05e0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "<built-in method tanh of type object at 0x7f01609a05e0>",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_init_std": {
            "$type": "torch.Tensor"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": {
            "$type": "torch.Tensor"
          },
          "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
        }
      },
      "_env_spec": {
        "max_episode_length": 500,
        "input_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True])",
          "_shape": [
            4
          ],
          "low": "array([-1., -1., -1., -1.], dtype=float32)",
          "high": "array([1., 1., 1., 1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "output_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
          "_shape": [
            45
          ],
          "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
          "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
          "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
          "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "$type": "garage._environment.EnvSpec"
      },
      "_name": "GaussianMLPPolicy",
      "_obs_dim": 45.0,
      "_action_dim": 4.0,
      "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
    },
    "_env": {
      "_env": {
        "_env": {
          "action_scale": 0.01,
          "action_rot_scale": 1.0,
          "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
          "hand_high": "array([0.5, 1. , 0.5])",
          "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
          "mocap_high": "array([0.5, 1. , 0.5])",
          "curr_path_length": 0,
          "seeded_rand_vec": false,
          "_freeze_rand_vec": true,
          "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
          "num_resets": 0,
          "current_seed": "None",
          "obj_init_pos": "None",
          "discrete_goal_space": "None",
          "discrete_goals": [],
          "active_discrete_goal": "None",
          "_partially_observable": true,
          "_constraint_mode": "relative",
          "_constraint_size": 0.03,
          "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
          "width": 480,
          "height": 480,
          "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
          "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
          "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
          "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
          "frame_skip": 5,
          "observation_space": {
            "dtype": "dtype('float64')",
            "_shape": [
              45
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
            "_np_random": "None",
            "$type": "gymnasium.spaces.box.Box"
          },
          "action_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True,  True])",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "bounded_above": "array([ True,  True,  True,  True])",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "gymnasium.spaces.box.Box"
          },
          "render_mode": "None",
          "camera_name": "None",
          "camera_id": "None",
          "mujoco_renderer": {
            "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
            "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
            "_viewers": {},
            "viewer": "None",
            "default_cam_config": "None",
            "width": 480,
            "height": 480,
            "max_geom": 1000,
            "_vopt": {},
            "camera_id": -1,
            "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
          },
          "_did_see_sim_exception": false,
          "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
          "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
          "_obs_obj_max_len": 14,
          "_set_task_called": true,
          "hand_init_pos": "array([0. , 0.6, 0.2])",
          "_target_pos": "None",
          "_random_reset_space": {
            "dtype": "dtype('float64')",
            "_shape": [
              6
            ],
            "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
            "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
            "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
            "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
            "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
            "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
            "_np_random": "None",
            "$type": "gymnasium.spaces.box.Box"
          },
          "goal_space": {
            "dtype": "dtype('float64')",
            "_shape": [
              3
            ],
            "low": "array([-0.1 ,  0.8 ,  0.05])",
            "bounded_below": "array([ True,  True,  True])",
            "high": "array([0.1, 0.9, 0.3])",
            "bounded_above": "array([ True,  True,  True])",
            "low_repr": "[-0.1   0.8   0.05]",
            "high_repr": "[0.1 0.9 0.3]",
            "_np_random": "None",
            "$type": "gymnasium.spaces.box.Box"
          },
          "_last_stable_obs": "None",
          "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
          "_ezpickle_args": [
            "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
            5,
            [
              -0.5,
              0.4,
              0.05
            ],
            [
              0.5,
              1,
              0.5
            ],
            [
              -0.5,
              0.4,
              0.05
            ],
            [
              0.5,
              1,
              0.5
            ],
            0.01,
            1.0
          ],
          "_ezpickle_kwargs": {},
          "init_config": {
            "obj_init_angle": 0.3,
            "obj_init_pos": "array([0.  , 0.6 , 0.02])",
            "hand_init_pos": "array([0. , 0.6, 0.2])"
          },
          "goal": "array([0.1, 0.8, 0.2])",
          "obj_init_angle": 0.3,
          "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
        },
        "_max_episode_length": 500,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True])",
          "_shape": [
            4
          ],
          "low": "array([-1., -1., -1., -1.], dtype=float32)",
          "high": "array([1., 1., 1., 1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
          "_shape": [
            45
          ],
          "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
          "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
          "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
          "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 500,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "_shape": [
              45
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      "_task_name": "pick-place-v2",
      "_task_id": "None",
      "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
    },
    "_task_sampler": {
      "_benchmark": {
        "constraint_mode": "relative",
        "constraint_size": 0.03,
        "_train_classes": {
          "pick-place-v2": {
            "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
          }
        },
        "_test_classes": {
          "pick-place-v2": {
            "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
          }
        },
        "_train_tasks": [
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          }
        ],
        "_test_tasks": [
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          }
        ],
        "$type": "metaworld_constrained.ML1"
      },
      "_kind": "train",
      "_inner_wrapper": "None",
      "_add_env_onehot": false,
      "_classes": {
        "pick-place-v2": {
          "$typename": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
        }
      },
      "_tasks": [
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        },
        {
          "$type": "metaworld_constrained.types.Task"
        }
      ],
      "_task_indices": {},
      "_task_map": {
        "pick-place-v2": [
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          },
          {
            "$type": "metaworld_constrained.types.Task"
          }
        ]
      },
      "_task_orders": {
        "pick-place-v2": "array([17, 21, 26, 41, 10, 14, 28,  5, 47, 40,  3, 16, 31, 13, 11, 37, 27,\n       25, 44, 38, 30, 42, 32, 35, 45, 49,  4, 34, 15,  0, 43,  2,  8, 48,\n       19,  1,  6, 39, 36, 23, 12, 46, 24, 33, 20, 22,  9, 18, 29,  7])"
      },
      "_next_order_index": 1,
      "_constructor_args": {
        "constraint_mode": "relative",
        "constraint_size": 0.03
      },
      "$type": "garage.experiment.task_sampler.MetaWorldTaskSampler"
    },
    "_value_function": {
      "_coeffs": "None",
      "_reg_coeff": 1e-05,
      "name": "LinearFeatureBaseline",
      "lower_bound": -10,
      "upper_bound": 10,
      "$type": "garage.np.baselines.linear_feature_baseline.LinearFeatureBaseline"
    },
    "_value_function_const": {
      "_coeffs": "None",
      "_reg_coeff": 1e-05,
      "name": "LinearFeatureBaselineConstraints",
      "lower_bound": -10,
      "upper_bound": 10,
      "$type": "garage.np.baselines.linear_feature_baseline.LinearFeatureBaseline"
    },
    "_num_grad_updates": 1,
    "_meta_batch_size": 25,
    "_inner_algo": {
      "_discount": 0.99,
      "policy": {
        "training": true,
        "_parameters": {
          "lagrangian": {
            "$type": "torch.nn.parameter.Parameter"
          }
        },
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_log_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              },
              "max_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_shared_mean_log_std_network": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 45.0,
                            "out_features": 128,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f01609a05e0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 128,
                            "out_features": 128,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f01609a05e0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 128,
                            "out_features": 4.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f01609a05e0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 128,
                            "out_features": 4.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f01609a05e0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
              }
            },
            "_input_dim": 45.0,
            "_hidden_sizes": [
              128,
              128
            ],
            "_action_dim": 4.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 0.5,
            "_max_std": 1.5,
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f01609a05e0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f01609a05e0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "<built-in method tanh of type object at 0x7f01609a05e0>",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_init_std": {
              "$type": "torch.Tensor"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": {
              "$type": "torch.Tensor"
            },
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 500,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "_shape": [
              45
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 45.0,
        "_action_dim": 4.0,
        "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      "max_episode_length": 500,
      "_value_function": {
        "_coeffs": "None",
        "_reg_coeff": 1e-05,
        "name": "LinearFeatureBaseline",
        "lower_bound": -10,
        "upper_bound": 10,
        "$type": "garage.np.baselines.linear_feature_baseline.LinearFeatureBaseline"
      },
      "_constraint": true,
      "_train_constraint": true,
      "_value_function_const": {
        "_coeffs": "None",
        "_reg_coeff": 1e-05,
        "name": "LinearFeatureBaselineConstraints",
        "lower_bound": -10,
        "upper_bound": 10,
        "$type": "garage.np.baselines.linear_feature_baseline.LinearFeatureBaseline"
      },
      "_gae_lambda": 1.0,
      "_center_adv": false,
      "_positive_adv": false,
      "_policy_ent_coeff": 5e-05,
      "_use_softplus_entropy": false,
      "_stop_entropy_gradient": true,
      "_entropy_method": "max",
      "_n_samples": 1,
      "_env_spec": {
        "max_episode_length": 500,
        "input_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True])",
          "_shape": [
            4
          ],
          "low": "array([-1., -1., -1., -1.], dtype=float32)",
          "high": "array([1., 1., 1., 1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "output_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
          "_shape": [
            45
          ],
          "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
          "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
          "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
          "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "$type": "garage._environment.EnvSpec"
      },
      "_maximum_entropy": true,
      "_entropy_regularzied": false,
      "_episode_reward_mean": [],
      "_sampler": "None",
      "_policy_optimizer": {
        "_optimizer": {
          "defaults": {
            "lr": 0.0001,
            "betas": [
              0.9,
              0.999
            ],
            "eps": 1e-08,
            "weight_decay": 0,
            "amsgrad": false
          },
          "state": {},
          "param_groups": [
            {
              "params": [
                {
                  "$type": "torch.nn.parameter.Parameter"
                },
                {
                  "$type": "torch.nn.parameter.Parameter"
                },
                {
                  "$type": "torch.nn.parameter.Parameter"
                },
                {
                  "$type": "torch.nn.parameter.Parameter"
                },
                {
                  "$type": "torch.nn.parameter.Parameter"
                },
                {
                  "$type": "torch.nn.parameter.Parameter"
                },
                {
                  "$type": "torch.nn.parameter.Parameter"
                },
                {
                  "$type": "torch.nn.parameter.Parameter"
                },
                {
                  "$type": "torch.nn.parameter.Parameter"
                },
                {
                  "$type": "torch.nn.parameter.Parameter"
                }
              ],
              "lr": 0.0001,
              "betas": [
                0.9,
                0.999
              ],
              "eps": 1e-08,
              "weight_decay": 0,
              "amsgrad": false
            }
          ],
          "$type": "torch.optim.adam.Adam"
        },
        "_max_optimization_epochs": 1,
        "_minibatch_size": "None",
        "$type": "garage.torch.optimizers.optimizer_wrapper.OptimizerWrapper"
      },
      "_vf_optimizer": "None",
      "_old_policy": {
        "training": true,
        "_parameters": {
          "lagrangian": {
            "$type": "torch.nn.parameter.Parameter"
          }
        },
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_log_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              },
              "max_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_shared_mean_log_std_network": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 45.0,
                            "out_features": 128,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f01609a05e0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 128,
                            "out_features": 128,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f01609a05e0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 128,
                            "out_features": 4.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f01609a05e0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 128,
                            "out_features": 4.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f01609a05e0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
              }
            },
            "_input_dim": 45.0,
            "_hidden_sizes": [
              128,
              128
            ],
            "_action_dim": 4.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 0.5,
            "_max_std": 1.5,
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f01609a05e0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f01609a05e0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "<built-in method tanh of type object at 0x7f01609a05e0>",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_init_std": {
              "$type": "torch.Tensor"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": {
              "$type": "torch.Tensor"
            },
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 500,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "_shape": [
              45
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 45.0,
        "_action_dim": 4.0,
        "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      "$type": "garage.torch.algos.vpg.VPG"
    },
    "_inner_optimizer": {
      "module": {
        "training": true,
        "_parameters": {
          "lagrangian": {
            "$type": "torch.nn.parameter.Parameter"
          }
        },
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_log_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              },
              "max_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_shared_mean_log_std_network": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 45.0,
                            "out_features": 128,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f01609a05e0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 128,
                            "out_features": 128,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f01609a05e0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 128,
                            "out_features": 4.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f01609a05e0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 128,
                            "out_features": 4.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f01609a05e0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
              }
            },
            "_input_dim": 45.0,
            "_hidden_sizes": [
              128,
              128
            ],
            "_action_dim": 4.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 0.5,
            "_max_std": 1.5,
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f01609a05e0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f01609a05e0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "<built-in method tanh of type object at 0x7f01609a05e0>",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_init_std": {
              "$type": "torch.Tensor"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": {
              "$type": "torch.Tensor"
            },
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 500,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "_shape": [
              45
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 45.0,
        "_action_dim": 4.0,
        "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      "lr": 0.0001,
      "$type": "garage.torch.optimizers.differentiable_sgd.DifferentiableSGD"
    },
    "_meta_optimizer": {
      "defaults": {},
      "_max_constraint_value": 0.01,
      "_cg_iters": 10,
      "_max_backtracks": 15,
      "_backtrack_ratio": 0.8,
      "_hvp_reg_coeff": 1e-05,
      "_accept_violation": false,
      "param_groups": [
        {
          "params": [
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            }
          ]
        }
      ],
      "$type": "garage.torch.optimizers.conjugate_gradient_optimizer.ConjugateGradientOptimizer"
    },
    "_evaluate_every_n_epochs": 1,
    "_w_and_b": true,
    "_constraint": true,
    "_optimizer_lagrangian": {
      "defaults": {
        "lr": 0.5,
        "betas": [
          0.9,
          0.999
        ],
        "eps": 1e-08,
        "weight_decay": 0,
        "amsgrad": false
      },
      "state": {},
      "param_groups": [
        {
          "params": [
            {
              "$type": "torch.nn.parameter.Parameter"
            }
          ],
          "lr": 0.5,
          "betas": [
            0.9,
            0.999
          ],
          "eps": 1e-08,
          "weight_decay": 0,
          "amsgrad": false
        }
      ],
      "$type": "torch.optim.adam.Adam"
    },
    "_constraint_threshold": 0.001,
    "_train_constraint": true,
    "$type": "garage.torch.algos.maml_trpo.MAMLTRPO"
  },
  "_env": {
    "_env": {
      "_env": {
        "action_scale": 0.01,
        "action_rot_scale": 1.0,
        "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
        "hand_high": "array([0.5, 1. , 0.5])",
        "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
        "mocap_high": "array([0.5, 1. , 0.5])",
        "curr_path_length": 0,
        "seeded_rand_vec": false,
        "_freeze_rand_vec": true,
        "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
        "num_resets": 0,
        "current_seed": "None",
        "obj_init_pos": "None",
        "discrete_goal_space": "None",
        "discrete_goals": [],
        "active_discrete_goal": "None",
        "_partially_observable": true,
        "_constraint_mode": "relative",
        "_constraint_size": 0.03,
        "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
        "width": 480,
        "height": 480,
        "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
        "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
        "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
        "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
        "frame_skip": 5,
        "observation_space": {
          "dtype": "dtype('float64')",
          "_shape": [
            45
          ],
          "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
          "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
          "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
          "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
          "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
          "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
          "_np_random": "None",
          "$type": "gymnasium.spaces.box.Box"
        },
        "action_space": {
          "dtype": "dtype('float32')",
          "_shape": [
            4
          ],
          "low": "array([-1., -1., -1., -1.], dtype=float32)",
          "bounded_below": "array([ True,  True,  True,  True])",
          "high": "array([1., 1., 1., 1.], dtype=float32)",
          "bounded_above": "array([ True,  True,  True,  True])",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "gymnasium.spaces.box.Box"
        },
        "render_mode": "None",
        "camera_name": "None",
        "camera_id": "None",
        "mujoco_renderer": {
          "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
          "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
          "_viewers": {},
          "viewer": "None",
          "default_cam_config": "None",
          "width": 480,
          "height": 480,
          "max_geom": 1000,
          "_vopt": {},
          "camera_id": -1,
          "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
        },
        "_did_see_sim_exception": false,
        "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
        "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
        "_obs_obj_max_len": 14,
        "_set_task_called": true,
        "hand_init_pos": "array([0. , 0.6, 0.2])",
        "_target_pos": "None",
        "_random_reset_space": {
          "dtype": "dtype('float64')",
          "_shape": [
            6
          ],
          "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
          "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
          "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
          "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
          "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
          "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
          "_np_random": "None",
          "$type": "gymnasium.spaces.box.Box"
        },
        "goal_space": {
          "dtype": "dtype('float64')",
          "_shape": [
            3
          ],
          "low": "array([-0.1 ,  0.8 ,  0.05])",
          "bounded_below": "array([ True,  True,  True])",
          "high": "array([0.1, 0.9, 0.3])",
          "bounded_above": "array([ True,  True,  True])",
          "low_repr": "[-0.1   0.8   0.05]",
          "high_repr": "[0.1 0.9 0.3]",
          "_np_random": "None",
          "$type": "gymnasium.spaces.box.Box"
        },
        "_last_stable_obs": "None",
        "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
        "_ezpickle_args": [
          "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
          5,
          [
            -0.5,
            0.4,
            0.05
          ],
          [
            0.5,
            1,
            0.5
          ],
          [
            -0.5,
            0.4,
            0.05
          ],
          [
            0.5,
            1,
            0.5
          ],
          0.01,
          1.0
        ],
        "_ezpickle_kwargs": {},
        "init_config": {
          "obj_init_angle": 0.3,
          "obj_init_pos": "array([0.  , 0.6 , 0.02])",
          "hand_init_pos": "array([0. , 0.6, 0.2])"
        },
        "goal": "array([0.1, 0.8, 0.2])",
        "obj_init_angle": 0.3,
        "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
      },
      "_max_episode_length": 500,
      "_render_modes": [
        "human",
        "rgb_array",
        "depth_array"
      ],
      "_step_cnt": "None",
      "_visualize": false,
      "_action_space": {
        "dtype": "dtype('float32')",
        "bounded_below": "array([ True,  True,  True,  True])",
        "bounded_above": "array([ True,  True,  True,  True])",
        "_shape": [
          4
        ],
        "low": "array([-1., -1., -1., -1.], dtype=float32)",
        "high": "array([1., 1., 1., 1.], dtype=float32)",
        "low_repr": "-1.0",
        "high_repr": "1.0",
        "_np_random": "None",
        "$type": "akro.box.Box"
      },
      "_observation_space": {
        "dtype": "dtype('float32')",
        "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
        "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
        "_shape": [
          45
        ],
        "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
        "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
        "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
        "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
        "_np_random": "None",
        "$type": "akro.box.Box"
      },
      "_spec": {
        "max_episode_length": 500,
        "input_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True])",
          "_shape": [
            4
          ],
          "low": "array([-1., -1., -1., -1.], dtype=float32)",
          "high": "array([1., 1., 1., 1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "output_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
          "_shape": [
            45
          ],
          "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
          "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
          "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
          "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "$type": "garage._environment.EnvSpec"
      },
      "_env_info": "None",
      "$type": "garage.envs.gym_env.GymEnv"
    },
    "_task_name": "pick-place-v2",
    "_task_id": "None",
    "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
  },
  "_sampler": {
    "_worker_factory": {
      "n_workers": 25,
      "_seed": "None",
      "_max_episode_length": 500,
      "_worker_class": {
        "$typename": "garage.sampler.default_worker.DefaultWorker"
      },
      "_worker_args": {},
      "$type": "garage.sampler.worker_factory.WorkerFactory"
    },
    "_sampler_worker": {
      "__ray_metadata__": "<ray.actor._ActorClassMetadata object at 0x7f0177844fa0>",
      "_default_options": {},
      "$type": "garage.sampler.ray_sampler.ActorClass(SamplerWorker)"
    },
    "_agents": {
      "training": true,
      "_parameters": {
        "lagrangian": {
          "$type": "torch.nn.parameter.Parameter"
        }
      },
      "_buffers": {},
      "_non_persistent_buffers_set": [],
      "_backward_hooks": {},
      "_forward_hooks": {},
      "_forward_pre_hooks": {},
      "_state_dict_hooks": {},
      "_load_state_dict_pre_hooks": {},
      "_modules": {
        "_module": {
          "training": true,
          "_parameters": {
            "_log_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            },
            "max_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_shared_mean_log_std_network": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 45.0,
                          "out_features": 128,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f01609a05e0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 128,
                          "out_features": 128,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f01609a05e0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 128,
                          "out_features": 4.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f01609a05e0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 128,
                          "out_features": 4.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f01609a05e0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
            }
          },
          "_input_dim": 45.0,
          "_hidden_sizes": [
            128,
            128
          ],
          "_action_dim": 4.0,
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 0.5,
          "_max_std": 1.5,
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f01609a05e0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f01609a05e0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "<built-in method tanh of type object at 0x7f01609a05e0>",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_init_std": {
            "$type": "torch.Tensor"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": {
            "$type": "torch.Tensor"
          },
          "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
        }
      },
      "_env_spec": {
        "max_episode_length": 500,
        "input_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True])",
          "_shape": [
            4
          ],
          "low": "array([-1., -1., -1., -1.], dtype=float32)",
          "high": "array([1., 1., 1., 1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "output_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
          "_shape": [
            45
          ],
          "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
          "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
          "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
          "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "$type": "garage._environment.EnvSpec"
      },
      "_name": "GaussianMLPPolicy",
      "_obs_dim": 45.0,
      "_action_dim": 4.0,
      "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
    },
    "_envs": [
      {
        "_env": {
          "_env": {
            "action_scale": 0.01,
            "action_rot_scale": 1.0,
            "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
            "hand_high": "array([0.5, 1. , 0.5])",
            "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
            "mocap_high": "array([0.5, 1. , 0.5])",
            "curr_path_length": 0,
            "seeded_rand_vec": false,
            "_freeze_rand_vec": true,
            "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
            "num_resets": 0,
            "current_seed": "None",
            "obj_init_pos": "None",
            "discrete_goal_space": "None",
            "discrete_goals": [],
            "active_discrete_goal": "None",
            "_partially_observable": true,
            "_constraint_mode": "relative",
            "_constraint_size": 0.03,
            "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
            "width": 480,
            "height": 480,
            "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
            "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
            "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
            "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
            "frame_skip": 5,
            "observation_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_above": "array([ True,  True,  True,  True])",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "render_mode": "None",
            "camera_name": "None",
            "camera_id": "None",
            "mujoco_renderer": {
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "_viewers": {},
              "viewer": "None",
              "default_cam_config": "None",
              "width": 480,
              "height": 480,
              "max_geom": 1000,
              "_vopt": {},
              "camera_id": -1,
              "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
            },
            "_did_see_sim_exception": false,
            "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
            "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
            "_obs_obj_max_len": 14,
            "_set_task_called": true,
            "hand_init_pos": "array([0. , 0.6, 0.2])",
            "_target_pos": "None",
            "_random_reset_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                6
              ],
              "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
              "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
              "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
              "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
              "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "goal_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                3
              ],
              "low": "array([-0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True])",
              "high": "array([0.1, 0.9, 0.3])",
              "bounded_above": "array([ True,  True,  True])",
              "low_repr": "[-0.1   0.8   0.05]",
              "high_repr": "[0.1 0.9 0.3]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "_last_stable_obs": "None",
            "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
            "_ezpickle_args": [
              "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              5,
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              0.01,
              1.0
            ],
            "_ezpickle_kwargs": {},
            "init_config": {
              "obj_init_angle": 0.3,
              "obj_init_pos": "array([0.  , 0.6 , 0.02])",
              "hand_init_pos": "array([0. , 0.6, 0.2])"
            },
            "goal": "array([0.1, 0.8, 0.2])",
            "obj_init_angle": 0.3,
            "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
          },
          "_max_episode_length": 500,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "_shape": [
              45
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_task_name": "pick-place-v2",
        "_task_id": "None",
        "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
      },
      {
        "_env": {
          "_env": {
            "action_scale": 0.01,
            "action_rot_scale": 1.0,
            "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
            "hand_high": "array([0.5, 1. , 0.5])",
            "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
            "mocap_high": "array([0.5, 1. , 0.5])",
            "curr_path_length": 0,
            "seeded_rand_vec": false,
            "_freeze_rand_vec": true,
            "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
            "num_resets": 0,
            "current_seed": "None",
            "obj_init_pos": "None",
            "discrete_goal_space": "None",
            "discrete_goals": [],
            "active_discrete_goal": "None",
            "_partially_observable": true,
            "_constraint_mode": "relative",
            "_constraint_size": 0.03,
            "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
            "width": 480,
            "height": 480,
            "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
            "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
            "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
            "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
            "frame_skip": 5,
            "observation_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_above": "array([ True,  True,  True,  True])",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "render_mode": "None",
            "camera_name": "None",
            "camera_id": "None",
            "mujoco_renderer": {
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "_viewers": {},
              "viewer": "None",
              "default_cam_config": "None",
              "width": 480,
              "height": 480,
              "max_geom": 1000,
              "_vopt": {},
              "camera_id": -1,
              "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
            },
            "_did_see_sim_exception": false,
            "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
            "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
            "_obs_obj_max_len": 14,
            "_set_task_called": true,
            "hand_init_pos": "array([0. , 0.6, 0.2])",
            "_target_pos": "None",
            "_random_reset_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                6
              ],
              "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
              "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
              "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
              "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
              "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "goal_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                3
              ],
              "low": "array([-0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True])",
              "high": "array([0.1, 0.9, 0.3])",
              "bounded_above": "array([ True,  True,  True])",
              "low_repr": "[-0.1   0.8   0.05]",
              "high_repr": "[0.1 0.9 0.3]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "_last_stable_obs": "None",
            "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
            "_ezpickle_args": [
              "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              5,
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              0.01,
              1.0
            ],
            "_ezpickle_kwargs": {},
            "init_config": {
              "obj_init_angle": 0.3,
              "obj_init_pos": "array([0.  , 0.6 , 0.02])",
              "hand_init_pos": "array([0. , 0.6, 0.2])"
            },
            "goal": "array([0.1, 0.8, 0.2])",
            "obj_init_angle": 0.3,
            "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
          },
          "_max_episode_length": 500,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "_shape": [
              45
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_task_name": "pick-place-v2",
        "_task_id": "None",
        "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
      },
      {
        "_env": {
          "_env": {
            "action_scale": 0.01,
            "action_rot_scale": 1.0,
            "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
            "hand_high": "array([0.5, 1. , 0.5])",
            "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
            "mocap_high": "array([0.5, 1. , 0.5])",
            "curr_path_length": 0,
            "seeded_rand_vec": false,
            "_freeze_rand_vec": true,
            "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
            "num_resets": 0,
            "current_seed": "None",
            "obj_init_pos": "None",
            "discrete_goal_space": "None",
            "discrete_goals": [],
            "active_discrete_goal": "None",
            "_partially_observable": true,
            "_constraint_mode": "relative",
            "_constraint_size": 0.03,
            "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
            "width": 480,
            "height": 480,
            "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
            "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
            "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
            "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
            "frame_skip": 5,
            "observation_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_above": "array([ True,  True,  True,  True])",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "render_mode": "None",
            "camera_name": "None",
            "camera_id": "None",
            "mujoco_renderer": {
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "_viewers": {},
              "viewer": "None",
              "default_cam_config": "None",
              "width": 480,
              "height": 480,
              "max_geom": 1000,
              "_vopt": {},
              "camera_id": -1,
              "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
            },
            "_did_see_sim_exception": false,
            "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
            "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
            "_obs_obj_max_len": 14,
            "_set_task_called": true,
            "hand_init_pos": "array([0. , 0.6, 0.2])",
            "_target_pos": "None",
            "_random_reset_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                6
              ],
              "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
              "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
              "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
              "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
              "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "goal_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                3
              ],
              "low": "array([-0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True])",
              "high": "array([0.1, 0.9, 0.3])",
              "bounded_above": "array([ True,  True,  True])",
              "low_repr": "[-0.1   0.8   0.05]",
              "high_repr": "[0.1 0.9 0.3]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "_last_stable_obs": "None",
            "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
            "_ezpickle_args": [
              "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              5,
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              0.01,
              1.0
            ],
            "_ezpickle_kwargs": {},
            "init_config": {
              "obj_init_angle": 0.3,
              "obj_init_pos": "array([0.  , 0.6 , 0.02])",
              "hand_init_pos": "array([0. , 0.6, 0.2])"
            },
            "goal": "array([0.1, 0.8, 0.2])",
            "obj_init_angle": 0.3,
            "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
          },
          "_max_episode_length": 500,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "_shape": [
              45
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_task_name": "pick-place-v2",
        "_task_id": "None",
        "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
      },
      {
        "_env": {
          "_env": {
            "action_scale": 0.01,
            "action_rot_scale": 1.0,
            "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
            "hand_high": "array([0.5, 1. , 0.5])",
            "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
            "mocap_high": "array([0.5, 1. , 0.5])",
            "curr_path_length": 0,
            "seeded_rand_vec": false,
            "_freeze_rand_vec": true,
            "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
            "num_resets": 0,
            "current_seed": "None",
            "obj_init_pos": "None",
            "discrete_goal_space": "None",
            "discrete_goals": [],
            "active_discrete_goal": "None",
            "_partially_observable": true,
            "_constraint_mode": "relative",
            "_constraint_size": 0.03,
            "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
            "width": 480,
            "height": 480,
            "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
            "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
            "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
            "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
            "frame_skip": 5,
            "observation_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_above": "array([ True,  True,  True,  True])",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "render_mode": "None",
            "camera_name": "None",
            "camera_id": "None",
            "mujoco_renderer": {
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "_viewers": {},
              "viewer": "None",
              "default_cam_config": "None",
              "width": 480,
              "height": 480,
              "max_geom": 1000,
              "_vopt": {},
              "camera_id": -1,
              "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
            },
            "_did_see_sim_exception": false,
            "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
            "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
            "_obs_obj_max_len": 14,
            "_set_task_called": true,
            "hand_init_pos": "array([0. , 0.6, 0.2])",
            "_target_pos": "None",
            "_random_reset_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                6
              ],
              "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
              "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
              "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
              "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
              "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "goal_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                3
              ],
              "low": "array([-0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True])",
              "high": "array([0.1, 0.9, 0.3])",
              "bounded_above": "array([ True,  True,  True])",
              "low_repr": "[-0.1   0.8   0.05]",
              "high_repr": "[0.1 0.9 0.3]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "_last_stable_obs": "None",
            "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
            "_ezpickle_args": [
              "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              5,
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              0.01,
              1.0
            ],
            "_ezpickle_kwargs": {},
            "init_config": {
              "obj_init_angle": 0.3,
              "obj_init_pos": "array([0.  , 0.6 , 0.02])",
              "hand_init_pos": "array([0. , 0.6, 0.2])"
            },
            "goal": "array([0.1, 0.8, 0.2])",
            "obj_init_angle": 0.3,
            "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
          },
          "_max_episode_length": 500,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "_shape": [
              45
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_task_name": "pick-place-v2",
        "_task_id": "None",
        "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
      },
      {
        "_env": {
          "_env": {
            "action_scale": 0.01,
            "action_rot_scale": 1.0,
            "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
            "hand_high": "array([0.5, 1. , 0.5])",
            "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
            "mocap_high": "array([0.5, 1. , 0.5])",
            "curr_path_length": 0,
            "seeded_rand_vec": false,
            "_freeze_rand_vec": true,
            "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
            "num_resets": 0,
            "current_seed": "None",
            "obj_init_pos": "None",
            "discrete_goal_space": "None",
            "discrete_goals": [],
            "active_discrete_goal": "None",
            "_partially_observable": true,
            "_constraint_mode": "relative",
            "_constraint_size": 0.03,
            "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
            "width": 480,
            "height": 480,
            "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
            "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
            "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
            "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
            "frame_skip": 5,
            "observation_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_above": "array([ True,  True,  True,  True])",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "render_mode": "None",
            "camera_name": "None",
            "camera_id": "None",
            "mujoco_renderer": {
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "_viewers": {},
              "viewer": "None",
              "default_cam_config": "None",
              "width": 480,
              "height": 480,
              "max_geom": 1000,
              "_vopt": {},
              "camera_id": -1,
              "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
            },
            "_did_see_sim_exception": false,
            "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
            "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
            "_obs_obj_max_len": 14,
            "_set_task_called": true,
            "hand_init_pos": "array([0. , 0.6, 0.2])",
            "_target_pos": "None",
            "_random_reset_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                6
              ],
              "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
              "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
              "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
              "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
              "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "goal_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                3
              ],
              "low": "array([-0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True])",
              "high": "array([0.1, 0.9, 0.3])",
              "bounded_above": "array([ True,  True,  True])",
              "low_repr": "[-0.1   0.8   0.05]",
              "high_repr": "[0.1 0.9 0.3]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "_last_stable_obs": "None",
            "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
            "_ezpickle_args": [
              "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              5,
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              0.01,
              1.0
            ],
            "_ezpickle_kwargs": {},
            "init_config": {
              "obj_init_angle": 0.3,
              "obj_init_pos": "array([0.  , 0.6 , 0.02])",
              "hand_init_pos": "array([0. , 0.6, 0.2])"
            },
            "goal": "array([0.1, 0.8, 0.2])",
            "obj_init_angle": 0.3,
            "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
          },
          "_max_episode_length": 500,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "_shape": [
              45
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_task_name": "pick-place-v2",
        "_task_id": "None",
        "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
      },
      {
        "_env": {
          "_env": {
            "action_scale": 0.01,
            "action_rot_scale": 1.0,
            "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
            "hand_high": "array([0.5, 1. , 0.5])",
            "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
            "mocap_high": "array([0.5, 1. , 0.5])",
            "curr_path_length": 0,
            "seeded_rand_vec": false,
            "_freeze_rand_vec": true,
            "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
            "num_resets": 0,
            "current_seed": "None",
            "obj_init_pos": "None",
            "discrete_goal_space": "None",
            "discrete_goals": [],
            "active_discrete_goal": "None",
            "_partially_observable": true,
            "_constraint_mode": "relative",
            "_constraint_size": 0.03,
            "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
            "width": 480,
            "height": 480,
            "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
            "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
            "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
            "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
            "frame_skip": 5,
            "observation_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_above": "array([ True,  True,  True,  True])",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "render_mode": "None",
            "camera_name": "None",
            "camera_id": "None",
            "mujoco_renderer": {
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "_viewers": {},
              "viewer": "None",
              "default_cam_config": "None",
              "width": 480,
              "height": 480,
              "max_geom": 1000,
              "_vopt": {},
              "camera_id": -1,
              "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
            },
            "_did_see_sim_exception": false,
            "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
            "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
            "_obs_obj_max_len": 14,
            "_set_task_called": true,
            "hand_init_pos": "array([0. , 0.6, 0.2])",
            "_target_pos": "None",
            "_random_reset_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                6
              ],
              "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
              "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
              "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
              "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
              "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "goal_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                3
              ],
              "low": "array([-0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True])",
              "high": "array([0.1, 0.9, 0.3])",
              "bounded_above": "array([ True,  True,  True])",
              "low_repr": "[-0.1   0.8   0.05]",
              "high_repr": "[0.1 0.9 0.3]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "_last_stable_obs": "None",
            "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
            "_ezpickle_args": [
              "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              5,
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              0.01,
              1.0
            ],
            "_ezpickle_kwargs": {},
            "init_config": {
              "obj_init_angle": 0.3,
              "obj_init_pos": "array([0.  , 0.6 , 0.02])",
              "hand_init_pos": "array([0. , 0.6, 0.2])"
            },
            "goal": "array([0.1, 0.8, 0.2])",
            "obj_init_angle": 0.3,
            "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
          },
          "_max_episode_length": 500,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "_shape": [
              45
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_task_name": "pick-place-v2",
        "_task_id": "None",
        "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
      },
      {
        "_env": {
          "_env": {
            "action_scale": 0.01,
            "action_rot_scale": 1.0,
            "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
            "hand_high": "array([0.5, 1. , 0.5])",
            "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
            "mocap_high": "array([0.5, 1. , 0.5])",
            "curr_path_length": 0,
            "seeded_rand_vec": false,
            "_freeze_rand_vec": true,
            "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
            "num_resets": 0,
            "current_seed": "None",
            "obj_init_pos": "None",
            "discrete_goal_space": "None",
            "discrete_goals": [],
            "active_discrete_goal": "None",
            "_partially_observable": true,
            "_constraint_mode": "relative",
            "_constraint_size": 0.03,
            "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
            "width": 480,
            "height": 480,
            "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
            "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
            "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
            "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
            "frame_skip": 5,
            "observation_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_above": "array([ True,  True,  True,  True])",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "render_mode": "None",
            "camera_name": "None",
            "camera_id": "None",
            "mujoco_renderer": {
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "_viewers": {},
              "viewer": "None",
              "default_cam_config": "None",
              "width": 480,
              "height": 480,
              "max_geom": 1000,
              "_vopt": {},
              "camera_id": -1,
              "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
            },
            "_did_see_sim_exception": false,
            "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
            "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
            "_obs_obj_max_len": 14,
            "_set_task_called": true,
            "hand_init_pos": "array([0. , 0.6, 0.2])",
            "_target_pos": "None",
            "_random_reset_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                6
              ],
              "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
              "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
              "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
              "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
              "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "goal_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                3
              ],
              "low": "array([-0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True])",
              "high": "array([0.1, 0.9, 0.3])",
              "bounded_above": "array([ True,  True,  True])",
              "low_repr": "[-0.1   0.8   0.05]",
              "high_repr": "[0.1 0.9 0.3]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "_last_stable_obs": "None",
            "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
            "_ezpickle_args": [
              "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              5,
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              0.01,
              1.0
            ],
            "_ezpickle_kwargs": {},
            "init_config": {
              "obj_init_angle": 0.3,
              "obj_init_pos": "array([0.  , 0.6 , 0.02])",
              "hand_init_pos": "array([0. , 0.6, 0.2])"
            },
            "goal": "array([0.1, 0.8, 0.2])",
            "obj_init_angle": 0.3,
            "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
          },
          "_max_episode_length": 500,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "_shape": [
              45
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_task_name": "pick-place-v2",
        "_task_id": "None",
        "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
      },
      {
        "_env": {
          "_env": {
            "action_scale": 0.01,
            "action_rot_scale": 1.0,
            "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
            "hand_high": "array([0.5, 1. , 0.5])",
            "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
            "mocap_high": "array([0.5, 1. , 0.5])",
            "curr_path_length": 0,
            "seeded_rand_vec": false,
            "_freeze_rand_vec": true,
            "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
            "num_resets": 0,
            "current_seed": "None",
            "obj_init_pos": "None",
            "discrete_goal_space": "None",
            "discrete_goals": [],
            "active_discrete_goal": "None",
            "_partially_observable": true,
            "_constraint_mode": "relative",
            "_constraint_size": 0.03,
            "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
            "width": 480,
            "height": 480,
            "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
            "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
            "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
            "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
            "frame_skip": 5,
            "observation_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_above": "array([ True,  True,  True,  True])",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "render_mode": "None",
            "camera_name": "None",
            "camera_id": "None",
            "mujoco_renderer": {
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "_viewers": {},
              "viewer": "None",
              "default_cam_config": "None",
              "width": 480,
              "height": 480,
              "max_geom": 1000,
              "_vopt": {},
              "camera_id": -1,
              "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
            },
            "_did_see_sim_exception": false,
            "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
            "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
            "_obs_obj_max_len": 14,
            "_set_task_called": true,
            "hand_init_pos": "array([0. , 0.6, 0.2])",
            "_target_pos": "None",
            "_random_reset_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                6
              ],
              "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
              "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
              "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
              "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
              "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "goal_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                3
              ],
              "low": "array([-0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True])",
              "high": "array([0.1, 0.9, 0.3])",
              "bounded_above": "array([ True,  True,  True])",
              "low_repr": "[-0.1   0.8   0.05]",
              "high_repr": "[0.1 0.9 0.3]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "_last_stable_obs": "None",
            "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
            "_ezpickle_args": [
              "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              5,
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              0.01,
              1.0
            ],
            "_ezpickle_kwargs": {},
            "init_config": {
              "obj_init_angle": 0.3,
              "obj_init_pos": "array([0.  , 0.6 , 0.02])",
              "hand_init_pos": "array([0. , 0.6, 0.2])"
            },
            "goal": "array([0.1, 0.8, 0.2])",
            "obj_init_angle": 0.3,
            "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
          },
          "_max_episode_length": 500,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "_shape": [
              45
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_task_name": "pick-place-v2",
        "_task_id": "None",
        "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
      },
      {
        "_env": {
          "_env": {
            "action_scale": 0.01,
            "action_rot_scale": 1.0,
            "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
            "hand_high": "array([0.5, 1. , 0.5])",
            "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
            "mocap_high": "array([0.5, 1. , 0.5])",
            "curr_path_length": 0,
            "seeded_rand_vec": false,
            "_freeze_rand_vec": true,
            "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
            "num_resets": 0,
            "current_seed": "None",
            "obj_init_pos": "None",
            "discrete_goal_space": "None",
            "discrete_goals": [],
            "active_discrete_goal": "None",
            "_partially_observable": true,
            "_constraint_mode": "relative",
            "_constraint_size": 0.03,
            "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
            "width": 480,
            "height": 480,
            "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
            "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
            "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
            "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
            "frame_skip": 5,
            "observation_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_above": "array([ True,  True,  True,  True])",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "render_mode": "None",
            "camera_name": "None",
            "camera_id": "None",
            "mujoco_renderer": {
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "_viewers": {},
              "viewer": "None",
              "default_cam_config": "None",
              "width": 480,
              "height": 480,
              "max_geom": 1000,
              "_vopt": {},
              "camera_id": -1,
              "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
            },
            "_did_see_sim_exception": false,
            "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
            "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
            "_obs_obj_max_len": 14,
            "_set_task_called": true,
            "hand_init_pos": "array([0. , 0.6, 0.2])",
            "_target_pos": "None",
            "_random_reset_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                6
              ],
              "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
              "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
              "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
              "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
              "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "goal_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                3
              ],
              "low": "array([-0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True])",
              "high": "array([0.1, 0.9, 0.3])",
              "bounded_above": "array([ True,  True,  True])",
              "low_repr": "[-0.1   0.8   0.05]",
              "high_repr": "[0.1 0.9 0.3]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "_last_stable_obs": "None",
            "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
            "_ezpickle_args": [
              "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              5,
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              0.01,
              1.0
            ],
            "_ezpickle_kwargs": {},
            "init_config": {
              "obj_init_angle": 0.3,
              "obj_init_pos": "array([0.  , 0.6 , 0.02])",
              "hand_init_pos": "array([0. , 0.6, 0.2])"
            },
            "goal": "array([0.1, 0.8, 0.2])",
            "obj_init_angle": 0.3,
            "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
          },
          "_max_episode_length": 500,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "_shape": [
              45
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_task_name": "pick-place-v2",
        "_task_id": "None",
        "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
      },
      {
        "_env": {
          "_env": {
            "action_scale": 0.01,
            "action_rot_scale": 1.0,
            "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
            "hand_high": "array([0.5, 1. , 0.5])",
            "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
            "mocap_high": "array([0.5, 1. , 0.5])",
            "curr_path_length": 0,
            "seeded_rand_vec": false,
            "_freeze_rand_vec": true,
            "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
            "num_resets": 0,
            "current_seed": "None",
            "obj_init_pos": "None",
            "discrete_goal_space": "None",
            "discrete_goals": [],
            "active_discrete_goal": "None",
            "_partially_observable": true,
            "_constraint_mode": "relative",
            "_constraint_size": 0.03,
            "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
            "width": 480,
            "height": 480,
            "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
            "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
            "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
            "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
            "frame_skip": 5,
            "observation_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_above": "array([ True,  True,  True,  True])",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "render_mode": "None",
            "camera_name": "None",
            "camera_id": "None",
            "mujoco_renderer": {
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "_viewers": {},
              "viewer": "None",
              "default_cam_config": "None",
              "width": 480,
              "height": 480,
              "max_geom": 1000,
              "_vopt": {},
              "camera_id": -1,
              "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
            },
            "_did_see_sim_exception": false,
            "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
            "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
            "_obs_obj_max_len": 14,
            "_set_task_called": true,
            "hand_init_pos": "array([0. , 0.6, 0.2])",
            "_target_pos": "None",
            "_random_reset_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                6
              ],
              "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
              "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
              "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
              "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
              "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "goal_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                3
              ],
              "low": "array([-0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True])",
              "high": "array([0.1, 0.9, 0.3])",
              "bounded_above": "array([ True,  True,  True])",
              "low_repr": "[-0.1   0.8   0.05]",
              "high_repr": "[0.1 0.9 0.3]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "_last_stable_obs": "None",
            "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
            "_ezpickle_args": [
              "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              5,
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              0.01,
              1.0
            ],
            "_ezpickle_kwargs": {},
            "init_config": {
              "obj_init_angle": 0.3,
              "obj_init_pos": "array([0.  , 0.6 , 0.02])",
              "hand_init_pos": "array([0. , 0.6, 0.2])"
            },
            "goal": "array([0.1, 0.8, 0.2])",
            "obj_init_angle": 0.3,
            "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
          },
          "_max_episode_length": 500,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "_shape": [
              45
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_task_name": "pick-place-v2",
        "_task_id": "None",
        "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
      },
      {
        "_env": {
          "_env": {
            "action_scale": 0.01,
            "action_rot_scale": 1.0,
            "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
            "hand_high": "array([0.5, 1. , 0.5])",
            "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
            "mocap_high": "array([0.5, 1. , 0.5])",
            "curr_path_length": 0,
            "seeded_rand_vec": false,
            "_freeze_rand_vec": true,
            "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
            "num_resets": 0,
            "current_seed": "None",
            "obj_init_pos": "None",
            "discrete_goal_space": "None",
            "discrete_goals": [],
            "active_discrete_goal": "None",
            "_partially_observable": true,
            "_constraint_mode": "relative",
            "_constraint_size": 0.03,
            "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
            "width": 480,
            "height": 480,
            "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
            "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
            "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
            "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
            "frame_skip": 5,
            "observation_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_above": "array([ True,  True,  True,  True])",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "render_mode": "None",
            "camera_name": "None",
            "camera_id": "None",
            "mujoco_renderer": {
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "_viewers": {},
              "viewer": "None",
              "default_cam_config": "None",
              "width": 480,
              "height": 480,
              "max_geom": 1000,
              "_vopt": {},
              "camera_id": -1,
              "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
            },
            "_did_see_sim_exception": false,
            "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
            "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
            "_obs_obj_max_len": 14,
            "_set_task_called": true,
            "hand_init_pos": "array([0. , 0.6, 0.2])",
            "_target_pos": "None",
            "_random_reset_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                6
              ],
              "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
              "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
              "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
              "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
              "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "goal_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                3
              ],
              "low": "array([-0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True])",
              "high": "array([0.1, 0.9, 0.3])",
              "bounded_above": "array([ True,  True,  True])",
              "low_repr": "[-0.1   0.8   0.05]",
              "high_repr": "[0.1 0.9 0.3]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "_last_stable_obs": "None",
            "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
            "_ezpickle_args": [
              "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              5,
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              0.01,
              1.0
            ],
            "_ezpickle_kwargs": {},
            "init_config": {
              "obj_init_angle": 0.3,
              "obj_init_pos": "array([0.  , 0.6 , 0.02])",
              "hand_init_pos": "array([0. , 0.6, 0.2])"
            },
            "goal": "array([0.1, 0.8, 0.2])",
            "obj_init_angle": 0.3,
            "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
          },
          "_max_episode_length": 500,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "_shape": [
              45
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_task_name": "pick-place-v2",
        "_task_id": "None",
        "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
      },
      {
        "_env": {
          "_env": {
            "action_scale": 0.01,
            "action_rot_scale": 1.0,
            "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
            "hand_high": "array([0.5, 1. , 0.5])",
            "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
            "mocap_high": "array([0.5, 1. , 0.5])",
            "curr_path_length": 0,
            "seeded_rand_vec": false,
            "_freeze_rand_vec": true,
            "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
            "num_resets": 0,
            "current_seed": "None",
            "obj_init_pos": "None",
            "discrete_goal_space": "None",
            "discrete_goals": [],
            "active_discrete_goal": "None",
            "_partially_observable": true,
            "_constraint_mode": "relative",
            "_constraint_size": 0.03,
            "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
            "width": 480,
            "height": 480,
            "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
            "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
            "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
            "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
            "frame_skip": 5,
            "observation_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_above": "array([ True,  True,  True,  True])",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "render_mode": "None",
            "camera_name": "None",
            "camera_id": "None",
            "mujoco_renderer": {
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "_viewers": {},
              "viewer": "None",
              "default_cam_config": "None",
              "width": 480,
              "height": 480,
              "max_geom": 1000,
              "_vopt": {},
              "camera_id": -1,
              "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
            },
            "_did_see_sim_exception": false,
            "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
            "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
            "_obs_obj_max_len": 14,
            "_set_task_called": true,
            "hand_init_pos": "array([0. , 0.6, 0.2])",
            "_target_pos": "None",
            "_random_reset_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                6
              ],
              "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
              "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
              "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
              "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
              "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "goal_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                3
              ],
              "low": "array([-0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True])",
              "high": "array([0.1, 0.9, 0.3])",
              "bounded_above": "array([ True,  True,  True])",
              "low_repr": "[-0.1   0.8   0.05]",
              "high_repr": "[0.1 0.9 0.3]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "_last_stable_obs": "None",
            "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
            "_ezpickle_args": [
              "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              5,
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              0.01,
              1.0
            ],
            "_ezpickle_kwargs": {},
            "init_config": {
              "obj_init_angle": 0.3,
              "obj_init_pos": "array([0.  , 0.6 , 0.02])",
              "hand_init_pos": "array([0. , 0.6, 0.2])"
            },
            "goal": "array([0.1, 0.8, 0.2])",
            "obj_init_angle": 0.3,
            "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
          },
          "_max_episode_length": 500,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "_shape": [
              45
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_task_name": "pick-place-v2",
        "_task_id": "None",
        "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
      },
      {
        "_env": {
          "_env": {
            "action_scale": 0.01,
            "action_rot_scale": 1.0,
            "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
            "hand_high": "array([0.5, 1. , 0.5])",
            "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
            "mocap_high": "array([0.5, 1. , 0.5])",
            "curr_path_length": 0,
            "seeded_rand_vec": false,
            "_freeze_rand_vec": true,
            "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
            "num_resets": 0,
            "current_seed": "None",
            "obj_init_pos": "None",
            "discrete_goal_space": "None",
            "discrete_goals": [],
            "active_discrete_goal": "None",
            "_partially_observable": true,
            "_constraint_mode": "relative",
            "_constraint_size": 0.03,
            "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
            "width": 480,
            "height": 480,
            "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
            "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
            "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
            "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
            "frame_skip": 5,
            "observation_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_above": "array([ True,  True,  True,  True])",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "render_mode": "None",
            "camera_name": "None",
            "camera_id": "None",
            "mujoco_renderer": {
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "_viewers": {},
              "viewer": "None",
              "default_cam_config": "None",
              "width": 480,
              "height": 480,
              "max_geom": 1000,
              "_vopt": {},
              "camera_id": -1,
              "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
            },
            "_did_see_sim_exception": false,
            "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
            "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
            "_obs_obj_max_len": 14,
            "_set_task_called": true,
            "hand_init_pos": "array([0. , 0.6, 0.2])",
            "_target_pos": "None",
            "_random_reset_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                6
              ],
              "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
              "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
              "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
              "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
              "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "goal_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                3
              ],
              "low": "array([-0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True])",
              "high": "array([0.1, 0.9, 0.3])",
              "bounded_above": "array([ True,  True,  True])",
              "low_repr": "[-0.1   0.8   0.05]",
              "high_repr": "[0.1 0.9 0.3]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "_last_stable_obs": "None",
            "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
            "_ezpickle_args": [
              "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              5,
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              0.01,
              1.0
            ],
            "_ezpickle_kwargs": {},
            "init_config": {
              "obj_init_angle": 0.3,
              "obj_init_pos": "array([0.  , 0.6 , 0.02])",
              "hand_init_pos": "array([0. , 0.6, 0.2])"
            },
            "goal": "array([0.1, 0.8, 0.2])",
            "obj_init_angle": 0.3,
            "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
          },
          "_max_episode_length": 500,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "_shape": [
              45
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_task_name": "pick-place-v2",
        "_task_id": "None",
        "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
      },
      {
        "_env": {
          "_env": {
            "action_scale": 0.01,
            "action_rot_scale": 1.0,
            "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
            "hand_high": "array([0.5, 1. , 0.5])",
            "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
            "mocap_high": "array([0.5, 1. , 0.5])",
            "curr_path_length": 0,
            "seeded_rand_vec": false,
            "_freeze_rand_vec": true,
            "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
            "num_resets": 0,
            "current_seed": "None",
            "obj_init_pos": "None",
            "discrete_goal_space": "None",
            "discrete_goals": [],
            "active_discrete_goal": "None",
            "_partially_observable": true,
            "_constraint_mode": "relative",
            "_constraint_size": 0.03,
            "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
            "width": 480,
            "height": 480,
            "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
            "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
            "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
            "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
            "frame_skip": 5,
            "observation_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_above": "array([ True,  True,  True,  True])",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "render_mode": "None",
            "camera_name": "None",
            "camera_id": "None",
            "mujoco_renderer": {
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "_viewers": {},
              "viewer": "None",
              "default_cam_config": "None",
              "width": 480,
              "height": 480,
              "max_geom": 1000,
              "_vopt": {},
              "camera_id": -1,
              "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
            },
            "_did_see_sim_exception": false,
            "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
            "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
            "_obs_obj_max_len": 14,
            "_set_task_called": true,
            "hand_init_pos": "array([0. , 0.6, 0.2])",
            "_target_pos": "None",
            "_random_reset_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                6
              ],
              "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
              "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
              "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
              "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
              "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "goal_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                3
              ],
              "low": "array([-0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True])",
              "high": "array([0.1, 0.9, 0.3])",
              "bounded_above": "array([ True,  True,  True])",
              "low_repr": "[-0.1   0.8   0.05]",
              "high_repr": "[0.1 0.9 0.3]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "_last_stable_obs": "None",
            "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
            "_ezpickle_args": [
              "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              5,
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              0.01,
              1.0
            ],
            "_ezpickle_kwargs": {},
            "init_config": {
              "obj_init_angle": 0.3,
              "obj_init_pos": "array([0.  , 0.6 , 0.02])",
              "hand_init_pos": "array([0. , 0.6, 0.2])"
            },
            "goal": "array([0.1, 0.8, 0.2])",
            "obj_init_angle": 0.3,
            "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
          },
          "_max_episode_length": 500,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "_shape": [
              45
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_task_name": "pick-place-v2",
        "_task_id": "None",
        "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
      },
      {
        "_env": {
          "_env": {
            "action_scale": 0.01,
            "action_rot_scale": 1.0,
            "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
            "hand_high": "array([0.5, 1. , 0.5])",
            "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
            "mocap_high": "array([0.5, 1. , 0.5])",
            "curr_path_length": 0,
            "seeded_rand_vec": false,
            "_freeze_rand_vec": true,
            "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
            "num_resets": 0,
            "current_seed": "None",
            "obj_init_pos": "None",
            "discrete_goal_space": "None",
            "discrete_goals": [],
            "active_discrete_goal": "None",
            "_partially_observable": true,
            "_constraint_mode": "relative",
            "_constraint_size": 0.03,
            "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
            "width": 480,
            "height": 480,
            "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
            "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
            "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
            "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
            "frame_skip": 5,
            "observation_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_above": "array([ True,  True,  True,  True])",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "render_mode": "None",
            "camera_name": "None",
            "camera_id": "None",
            "mujoco_renderer": {
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "_viewers": {},
              "viewer": "None",
              "default_cam_config": "None",
              "width": 480,
              "height": 480,
              "max_geom": 1000,
              "_vopt": {},
              "camera_id": -1,
              "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
            },
            "_did_see_sim_exception": false,
            "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
            "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
            "_obs_obj_max_len": 14,
            "_set_task_called": true,
            "hand_init_pos": "array([0. , 0.6, 0.2])",
            "_target_pos": "None",
            "_random_reset_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                6
              ],
              "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
              "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
              "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
              "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
              "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "goal_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                3
              ],
              "low": "array([-0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True])",
              "high": "array([0.1, 0.9, 0.3])",
              "bounded_above": "array([ True,  True,  True])",
              "low_repr": "[-0.1   0.8   0.05]",
              "high_repr": "[0.1 0.9 0.3]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "_last_stable_obs": "None",
            "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
            "_ezpickle_args": [
              "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              5,
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              0.01,
              1.0
            ],
            "_ezpickle_kwargs": {},
            "init_config": {
              "obj_init_angle": 0.3,
              "obj_init_pos": "array([0.  , 0.6 , 0.02])",
              "hand_init_pos": "array([0. , 0.6, 0.2])"
            },
            "goal": "array([0.1, 0.8, 0.2])",
            "obj_init_angle": 0.3,
            "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
          },
          "_max_episode_length": 500,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "_shape": [
              45
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_task_name": "pick-place-v2",
        "_task_id": "None",
        "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
      },
      {
        "_env": {
          "_env": {
            "action_scale": 0.01,
            "action_rot_scale": 1.0,
            "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
            "hand_high": "array([0.5, 1. , 0.5])",
            "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
            "mocap_high": "array([0.5, 1. , 0.5])",
            "curr_path_length": 0,
            "seeded_rand_vec": false,
            "_freeze_rand_vec": true,
            "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
            "num_resets": 0,
            "current_seed": "None",
            "obj_init_pos": "None",
            "discrete_goal_space": "None",
            "discrete_goals": [],
            "active_discrete_goal": "None",
            "_partially_observable": true,
            "_constraint_mode": "relative",
            "_constraint_size": 0.03,
            "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
            "width": 480,
            "height": 480,
            "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
            "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
            "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
            "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
            "frame_skip": 5,
            "observation_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_above": "array([ True,  True,  True,  True])",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "render_mode": "None",
            "camera_name": "None",
            "camera_id": "None",
            "mujoco_renderer": {
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "_viewers": {},
              "viewer": "None",
              "default_cam_config": "None",
              "width": 480,
              "height": 480,
              "max_geom": 1000,
              "_vopt": {},
              "camera_id": -1,
              "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
            },
            "_did_see_sim_exception": false,
            "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
            "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
            "_obs_obj_max_len": 14,
            "_set_task_called": true,
            "hand_init_pos": "array([0. , 0.6, 0.2])",
            "_target_pos": "None",
            "_random_reset_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                6
              ],
              "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
              "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
              "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
              "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
              "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "goal_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                3
              ],
              "low": "array([-0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True])",
              "high": "array([0.1, 0.9, 0.3])",
              "bounded_above": "array([ True,  True,  True])",
              "low_repr": "[-0.1   0.8   0.05]",
              "high_repr": "[0.1 0.9 0.3]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "_last_stable_obs": "None",
            "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
            "_ezpickle_args": [
              "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              5,
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              0.01,
              1.0
            ],
            "_ezpickle_kwargs": {},
            "init_config": {
              "obj_init_angle": 0.3,
              "obj_init_pos": "array([0.  , 0.6 , 0.02])",
              "hand_init_pos": "array([0. , 0.6, 0.2])"
            },
            "goal": "array([0.1, 0.8, 0.2])",
            "obj_init_angle": 0.3,
            "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
          },
          "_max_episode_length": 500,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "_shape": [
              45
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_task_name": "pick-place-v2",
        "_task_id": "None",
        "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
      },
      {
        "_env": {
          "_env": {
            "action_scale": 0.01,
            "action_rot_scale": 1.0,
            "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
            "hand_high": "array([0.5, 1. , 0.5])",
            "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
            "mocap_high": "array([0.5, 1. , 0.5])",
            "curr_path_length": 0,
            "seeded_rand_vec": false,
            "_freeze_rand_vec": true,
            "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
            "num_resets": 0,
            "current_seed": "None",
            "obj_init_pos": "None",
            "discrete_goal_space": "None",
            "discrete_goals": [],
            "active_discrete_goal": "None",
            "_partially_observable": true,
            "_constraint_mode": "relative",
            "_constraint_size": 0.03,
            "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
            "width": 480,
            "height": 480,
            "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
            "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
            "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
            "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
            "frame_skip": 5,
            "observation_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_above": "array([ True,  True,  True,  True])",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "render_mode": "None",
            "camera_name": "None",
            "camera_id": "None",
            "mujoco_renderer": {
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "_viewers": {},
              "viewer": "None",
              "default_cam_config": "None",
              "width": 480,
              "height": 480,
              "max_geom": 1000,
              "_vopt": {},
              "camera_id": -1,
              "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
            },
            "_did_see_sim_exception": false,
            "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
            "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
            "_obs_obj_max_len": 14,
            "_set_task_called": true,
            "hand_init_pos": "array([0. , 0.6, 0.2])",
            "_target_pos": "None",
            "_random_reset_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                6
              ],
              "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
              "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
              "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
              "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
              "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "goal_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                3
              ],
              "low": "array([-0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True])",
              "high": "array([0.1, 0.9, 0.3])",
              "bounded_above": "array([ True,  True,  True])",
              "low_repr": "[-0.1   0.8   0.05]",
              "high_repr": "[0.1 0.9 0.3]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "_last_stable_obs": "None",
            "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
            "_ezpickle_args": [
              "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              5,
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              0.01,
              1.0
            ],
            "_ezpickle_kwargs": {},
            "init_config": {
              "obj_init_angle": 0.3,
              "obj_init_pos": "array([0.  , 0.6 , 0.02])",
              "hand_init_pos": "array([0. , 0.6, 0.2])"
            },
            "goal": "array([0.1, 0.8, 0.2])",
            "obj_init_angle": 0.3,
            "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
          },
          "_max_episode_length": 500,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "_shape": [
              45
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_task_name": "pick-place-v2",
        "_task_id": "None",
        "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
      },
      {
        "_env": {
          "_env": {
            "action_scale": 0.01,
            "action_rot_scale": 1.0,
            "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
            "hand_high": "array([0.5, 1. , 0.5])",
            "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
            "mocap_high": "array([0.5, 1. , 0.5])",
            "curr_path_length": 0,
            "seeded_rand_vec": false,
            "_freeze_rand_vec": true,
            "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
            "num_resets": 0,
            "current_seed": "None",
            "obj_init_pos": "None",
            "discrete_goal_space": "None",
            "discrete_goals": [],
            "active_discrete_goal": "None",
            "_partially_observable": true,
            "_constraint_mode": "relative",
            "_constraint_size": 0.03,
            "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
            "width": 480,
            "height": 480,
            "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
            "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
            "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
            "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
            "frame_skip": 5,
            "observation_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_above": "array([ True,  True,  True,  True])",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "render_mode": "None",
            "camera_name": "None",
            "camera_id": "None",
            "mujoco_renderer": {
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "_viewers": {},
              "viewer": "None",
              "default_cam_config": "None",
              "width": 480,
              "height": 480,
              "max_geom": 1000,
              "_vopt": {},
              "camera_id": -1,
              "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
            },
            "_did_see_sim_exception": false,
            "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
            "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
            "_obs_obj_max_len": 14,
            "_set_task_called": true,
            "hand_init_pos": "array([0. , 0.6, 0.2])",
            "_target_pos": "None",
            "_random_reset_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                6
              ],
              "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
              "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
              "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
              "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
              "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "goal_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                3
              ],
              "low": "array([-0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True])",
              "high": "array([0.1, 0.9, 0.3])",
              "bounded_above": "array([ True,  True,  True])",
              "low_repr": "[-0.1   0.8   0.05]",
              "high_repr": "[0.1 0.9 0.3]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "_last_stable_obs": "None",
            "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
            "_ezpickle_args": [
              "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              5,
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              0.01,
              1.0
            ],
            "_ezpickle_kwargs": {},
            "init_config": {
              "obj_init_angle": 0.3,
              "obj_init_pos": "array([0.  , 0.6 , 0.02])",
              "hand_init_pos": "array([0. , 0.6, 0.2])"
            },
            "goal": "array([0.1, 0.8, 0.2])",
            "obj_init_angle": 0.3,
            "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
          },
          "_max_episode_length": 500,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "_shape": [
              45
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_task_name": "pick-place-v2",
        "_task_id": "None",
        "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
      },
      {
        "_env": {
          "_env": {
            "action_scale": 0.01,
            "action_rot_scale": 1.0,
            "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
            "hand_high": "array([0.5, 1. , 0.5])",
            "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
            "mocap_high": "array([0.5, 1. , 0.5])",
            "curr_path_length": 0,
            "seeded_rand_vec": false,
            "_freeze_rand_vec": true,
            "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
            "num_resets": 0,
            "current_seed": "None",
            "obj_init_pos": "None",
            "discrete_goal_space": "None",
            "discrete_goals": [],
            "active_discrete_goal": "None",
            "_partially_observable": true,
            "_constraint_mode": "relative",
            "_constraint_size": 0.03,
            "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
            "width": 480,
            "height": 480,
            "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
            "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
            "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
            "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
            "frame_skip": 5,
            "observation_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_above": "array([ True,  True,  True,  True])",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "render_mode": "None",
            "camera_name": "None",
            "camera_id": "None",
            "mujoco_renderer": {
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "_viewers": {},
              "viewer": "None",
              "default_cam_config": "None",
              "width": 480,
              "height": 480,
              "max_geom": 1000,
              "_vopt": {},
              "camera_id": -1,
              "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
            },
            "_did_see_sim_exception": false,
            "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
            "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
            "_obs_obj_max_len": 14,
            "_set_task_called": true,
            "hand_init_pos": "array([0. , 0.6, 0.2])",
            "_target_pos": "None",
            "_random_reset_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                6
              ],
              "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
              "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
              "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
              "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
              "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "goal_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                3
              ],
              "low": "array([-0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True])",
              "high": "array([0.1, 0.9, 0.3])",
              "bounded_above": "array([ True,  True,  True])",
              "low_repr": "[-0.1   0.8   0.05]",
              "high_repr": "[0.1 0.9 0.3]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "_last_stable_obs": "None",
            "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
            "_ezpickle_args": [
              "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              5,
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              0.01,
              1.0
            ],
            "_ezpickle_kwargs": {},
            "init_config": {
              "obj_init_angle": 0.3,
              "obj_init_pos": "array([0.  , 0.6 , 0.02])",
              "hand_init_pos": "array([0. , 0.6, 0.2])"
            },
            "goal": "array([0.1, 0.8, 0.2])",
            "obj_init_angle": 0.3,
            "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
          },
          "_max_episode_length": 500,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "_shape": [
              45
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_task_name": "pick-place-v2",
        "_task_id": "None",
        "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
      },
      {
        "_env": {
          "_env": {
            "action_scale": 0.01,
            "action_rot_scale": 1.0,
            "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
            "hand_high": "array([0.5, 1. , 0.5])",
            "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
            "mocap_high": "array([0.5, 1. , 0.5])",
            "curr_path_length": 0,
            "seeded_rand_vec": false,
            "_freeze_rand_vec": true,
            "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
            "num_resets": 0,
            "current_seed": "None",
            "obj_init_pos": "None",
            "discrete_goal_space": "None",
            "discrete_goals": [],
            "active_discrete_goal": "None",
            "_partially_observable": true,
            "_constraint_mode": "relative",
            "_constraint_size": 0.03,
            "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
            "width": 480,
            "height": 480,
            "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
            "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
            "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
            "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
            "frame_skip": 5,
            "observation_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_above": "array([ True,  True,  True,  True])",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "render_mode": "None",
            "camera_name": "None",
            "camera_id": "None",
            "mujoco_renderer": {
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "_viewers": {},
              "viewer": "None",
              "default_cam_config": "None",
              "width": 480,
              "height": 480,
              "max_geom": 1000,
              "_vopt": {},
              "camera_id": -1,
              "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
            },
            "_did_see_sim_exception": false,
            "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
            "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
            "_obs_obj_max_len": 14,
            "_set_task_called": true,
            "hand_init_pos": "array([0. , 0.6, 0.2])",
            "_target_pos": "None",
            "_random_reset_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                6
              ],
              "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
              "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
              "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
              "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
              "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "goal_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                3
              ],
              "low": "array([-0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True])",
              "high": "array([0.1, 0.9, 0.3])",
              "bounded_above": "array([ True,  True,  True])",
              "low_repr": "[-0.1   0.8   0.05]",
              "high_repr": "[0.1 0.9 0.3]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "_last_stable_obs": "None",
            "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
            "_ezpickle_args": [
              "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              5,
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              0.01,
              1.0
            ],
            "_ezpickle_kwargs": {},
            "init_config": {
              "obj_init_angle": 0.3,
              "obj_init_pos": "array([0.  , 0.6 , 0.02])",
              "hand_init_pos": "array([0. , 0.6, 0.2])"
            },
            "goal": "array([0.1, 0.8, 0.2])",
            "obj_init_angle": 0.3,
            "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
          },
          "_max_episode_length": 500,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "_shape": [
              45
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_task_name": "pick-place-v2",
        "_task_id": "None",
        "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
      },
      {
        "_env": {
          "_env": {
            "action_scale": 0.01,
            "action_rot_scale": 1.0,
            "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
            "hand_high": "array([0.5, 1. , 0.5])",
            "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
            "mocap_high": "array([0.5, 1. , 0.5])",
            "curr_path_length": 0,
            "seeded_rand_vec": false,
            "_freeze_rand_vec": true,
            "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
            "num_resets": 0,
            "current_seed": "None",
            "obj_init_pos": "None",
            "discrete_goal_space": "None",
            "discrete_goals": [],
            "active_discrete_goal": "None",
            "_partially_observable": true,
            "_constraint_mode": "relative",
            "_constraint_size": 0.03,
            "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
            "width": 480,
            "height": 480,
            "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
            "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
            "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
            "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
            "frame_skip": 5,
            "observation_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_above": "array([ True,  True,  True,  True])",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "render_mode": "None",
            "camera_name": "None",
            "camera_id": "None",
            "mujoco_renderer": {
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "_viewers": {},
              "viewer": "None",
              "default_cam_config": "None",
              "width": 480,
              "height": 480,
              "max_geom": 1000,
              "_vopt": {},
              "camera_id": -1,
              "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
            },
            "_did_see_sim_exception": false,
            "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
            "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
            "_obs_obj_max_len": 14,
            "_set_task_called": true,
            "hand_init_pos": "array([0. , 0.6, 0.2])",
            "_target_pos": "None",
            "_random_reset_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                6
              ],
              "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
              "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
              "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
              "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
              "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "goal_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                3
              ],
              "low": "array([-0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True])",
              "high": "array([0.1, 0.9, 0.3])",
              "bounded_above": "array([ True,  True,  True])",
              "low_repr": "[-0.1   0.8   0.05]",
              "high_repr": "[0.1 0.9 0.3]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "_last_stable_obs": "None",
            "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
            "_ezpickle_args": [
              "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              5,
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              0.01,
              1.0
            ],
            "_ezpickle_kwargs": {},
            "init_config": {
              "obj_init_angle": 0.3,
              "obj_init_pos": "array([0.  , 0.6 , 0.02])",
              "hand_init_pos": "array([0. , 0.6, 0.2])"
            },
            "goal": "array([0.1, 0.8, 0.2])",
            "obj_init_angle": 0.3,
            "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
          },
          "_max_episode_length": 500,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "_shape": [
              45
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_task_name": "pick-place-v2",
        "_task_id": "None",
        "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
      },
      {
        "_env": {
          "_env": {
            "action_scale": 0.01,
            "action_rot_scale": 1.0,
            "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
            "hand_high": "array([0.5, 1. , 0.5])",
            "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
            "mocap_high": "array([0.5, 1. , 0.5])",
            "curr_path_length": 0,
            "seeded_rand_vec": false,
            "_freeze_rand_vec": true,
            "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
            "num_resets": 0,
            "current_seed": "None",
            "obj_init_pos": "None",
            "discrete_goal_space": "None",
            "discrete_goals": [],
            "active_discrete_goal": "None",
            "_partially_observable": true,
            "_constraint_mode": "relative",
            "_constraint_size": 0.03,
            "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
            "width": 480,
            "height": 480,
            "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
            "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
            "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
            "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
            "frame_skip": 5,
            "observation_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_above": "array([ True,  True,  True,  True])",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "render_mode": "None",
            "camera_name": "None",
            "camera_id": "None",
            "mujoco_renderer": {
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "_viewers": {},
              "viewer": "None",
              "default_cam_config": "None",
              "width": 480,
              "height": 480,
              "max_geom": 1000,
              "_vopt": {},
              "camera_id": -1,
              "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
            },
            "_did_see_sim_exception": false,
            "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
            "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
            "_obs_obj_max_len": 14,
            "_set_task_called": true,
            "hand_init_pos": "array([0. , 0.6, 0.2])",
            "_target_pos": "None",
            "_random_reset_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                6
              ],
              "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
              "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
              "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
              "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
              "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "goal_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                3
              ],
              "low": "array([-0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True])",
              "high": "array([0.1, 0.9, 0.3])",
              "bounded_above": "array([ True,  True,  True])",
              "low_repr": "[-0.1   0.8   0.05]",
              "high_repr": "[0.1 0.9 0.3]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "_last_stable_obs": "None",
            "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
            "_ezpickle_args": [
              "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              5,
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              0.01,
              1.0
            ],
            "_ezpickle_kwargs": {},
            "init_config": {
              "obj_init_angle": 0.3,
              "obj_init_pos": "array([0.  , 0.6 , 0.02])",
              "hand_init_pos": "array([0. , 0.6, 0.2])"
            },
            "goal": "array([0.1, 0.8, 0.2])",
            "obj_init_angle": 0.3,
            "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
          },
          "_max_episode_length": 500,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "_shape": [
              45
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_task_name": "pick-place-v2",
        "_task_id": "None",
        "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
      },
      {
        "_env": {
          "_env": {
            "action_scale": 0.01,
            "action_rot_scale": 1.0,
            "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
            "hand_high": "array([0.5, 1. , 0.5])",
            "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
            "mocap_high": "array([0.5, 1. , 0.5])",
            "curr_path_length": 0,
            "seeded_rand_vec": false,
            "_freeze_rand_vec": true,
            "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
            "num_resets": 0,
            "current_seed": "None",
            "obj_init_pos": "None",
            "discrete_goal_space": "None",
            "discrete_goals": [],
            "active_discrete_goal": "None",
            "_partially_observable": true,
            "_constraint_mode": "relative",
            "_constraint_size": 0.03,
            "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
            "width": 480,
            "height": 480,
            "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
            "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
            "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
            "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
            "frame_skip": 5,
            "observation_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_above": "array([ True,  True,  True,  True])",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "render_mode": "None",
            "camera_name": "None",
            "camera_id": "None",
            "mujoco_renderer": {
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "_viewers": {},
              "viewer": "None",
              "default_cam_config": "None",
              "width": 480,
              "height": 480,
              "max_geom": 1000,
              "_vopt": {},
              "camera_id": -1,
              "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
            },
            "_did_see_sim_exception": false,
            "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
            "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
            "_obs_obj_max_len": 14,
            "_set_task_called": true,
            "hand_init_pos": "array([0. , 0.6, 0.2])",
            "_target_pos": "None",
            "_random_reset_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                6
              ],
              "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
              "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
              "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
              "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
              "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "goal_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                3
              ],
              "low": "array([-0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True])",
              "high": "array([0.1, 0.9, 0.3])",
              "bounded_above": "array([ True,  True,  True])",
              "low_repr": "[-0.1   0.8   0.05]",
              "high_repr": "[0.1 0.9 0.3]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "_last_stable_obs": "None",
            "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
            "_ezpickle_args": [
              "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              5,
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              0.01,
              1.0
            ],
            "_ezpickle_kwargs": {},
            "init_config": {
              "obj_init_angle": 0.3,
              "obj_init_pos": "array([0.  , 0.6 , 0.02])",
              "hand_init_pos": "array([0. , 0.6, 0.2])"
            },
            "goal": "array([0.1, 0.8, 0.2])",
            "obj_init_angle": 0.3,
            "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
          },
          "_max_episode_length": 500,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "_shape": [
              45
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_task_name": "pick-place-v2",
        "_task_id": "None",
        "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
      },
      {
        "_env": {
          "_env": {
            "action_scale": 0.01,
            "action_rot_scale": 1.0,
            "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
            "hand_high": "array([0.5, 1. , 0.5])",
            "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
            "mocap_high": "array([0.5, 1. , 0.5])",
            "curr_path_length": 0,
            "seeded_rand_vec": false,
            "_freeze_rand_vec": true,
            "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
            "num_resets": 0,
            "current_seed": "None",
            "obj_init_pos": "None",
            "discrete_goal_space": "None",
            "discrete_goals": [],
            "active_discrete_goal": "None",
            "_partially_observable": true,
            "_constraint_mode": "relative",
            "_constraint_size": 0.03,
            "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
            "width": 480,
            "height": 480,
            "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
            "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
            "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
            "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
            "frame_skip": 5,
            "observation_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_above": "array([ True,  True,  True,  True])",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "render_mode": "None",
            "camera_name": "None",
            "camera_id": "None",
            "mujoco_renderer": {
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "_viewers": {},
              "viewer": "None",
              "default_cam_config": "None",
              "width": 480,
              "height": 480,
              "max_geom": 1000,
              "_vopt": {},
              "camera_id": -1,
              "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
            },
            "_did_see_sim_exception": false,
            "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
            "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
            "_obs_obj_max_len": 14,
            "_set_task_called": true,
            "hand_init_pos": "array([0. , 0.6, 0.2])",
            "_target_pos": "None",
            "_random_reset_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                6
              ],
              "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
              "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
              "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
              "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
              "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "goal_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                3
              ],
              "low": "array([-0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True])",
              "high": "array([0.1, 0.9, 0.3])",
              "bounded_above": "array([ True,  True,  True])",
              "low_repr": "[-0.1   0.8   0.05]",
              "high_repr": "[0.1 0.9 0.3]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "_last_stable_obs": "None",
            "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
            "_ezpickle_args": [
              "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              5,
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              0.01,
              1.0
            ],
            "_ezpickle_kwargs": {},
            "init_config": {
              "obj_init_angle": 0.3,
              "obj_init_pos": "array([0.  , 0.6 , 0.02])",
              "hand_init_pos": "array([0. , 0.6, 0.2])"
            },
            "goal": "array([0.1, 0.8, 0.2])",
            "obj_init_angle": 0.3,
            "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
          },
          "_max_episode_length": 500,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "_shape": [
              45
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_task_name": "pick-place-v2",
        "_task_id": "None",
        "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
      },
      {
        "_env": {
          "_env": {
            "action_scale": 0.01,
            "action_rot_scale": 1.0,
            "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
            "hand_high": "array([0.5, 1. , 0.5])",
            "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
            "mocap_high": "array([0.5, 1. , 0.5])",
            "curr_path_length": 0,
            "seeded_rand_vec": false,
            "_freeze_rand_vec": true,
            "_last_rand_vec": "array([-0.08921815,  0.64201937,  0.02      ,  0.08372036,  0.8000402 ,\n        0.29418979, -0.00274889,  0.72102979,  0.02      ])",
            "num_resets": 0,
            "current_seed": "None",
            "obj_init_pos": "None",
            "discrete_goal_space": "None",
            "discrete_goals": [],
            "active_discrete_goal": "None",
            "_partially_observable": true,
            "_constraint_mode": "relative",
            "_constraint_size": 0.03,
            "fullpath": "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
            "width": 480,
            "height": 480,
            "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
            "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
            "init_qpos": "array([0.2 , 0.75, 0.02, 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.02, 1.  , 0.  , 0.  ,\n       0.  ])",
            "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0.])",
            "frame_skip": 5,
            "observation_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ])",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_above": "array([ True,  True,  True,  True])",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "render_mode": "None",
            "camera_name": "None",
            "camera_id": "None",
            "mujoco_renderer": {
              "model": "<mujoco._structs.MjModel object at 0x7f0179e729f0>",
              "data": "<mujoco._structs.MjData object at 0x7f0177a2b6f0>",
              "_viewers": {},
              "viewer": "None",
              "default_cam_config": "None",
              "width": 480,
              "height": 480,
              "max_geom": 1000,
              "_vopt": {},
              "camera_id": -1,
              "$type": "gymnasium.envs.mujoco.mujoco_rendering.MujocoRenderer"
            },
            "_did_see_sim_exception": false,
            "init_left_pad": "array([1.13549966, 0.15213858, 0.27071295])",
            "init_right_pad": "array([1.13550034, 0.16846124, 0.36328493])",
            "_obs_obj_max_len": 14,
            "_set_task_called": true,
            "hand_init_pos": "array([0. , 0.6, 0.2])",
            "_target_pos": "None",
            "_random_reset_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                6
              ],
              "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
              "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ])",
              "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
              "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
              "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "goal_space": {
              "dtype": "dtype('float64')",
              "_shape": [
                3
              ],
              "low": "array([-0.1 ,  0.8 ,  0.05])",
              "bounded_below": "array([ True,  True,  True])",
              "high": "array([0.1, 0.9, 0.3])",
              "bounded_above": "array([ True,  True,  True])",
              "low_repr": "[-0.1   0.8   0.05]",
              "high_repr": "[0.1 0.9 0.3]",
              "_np_random": "None",
              "$type": "gymnasium.spaces.box.Box"
            },
            "_last_stable_obs": "None",
            "_prev_obs": "array([1.1355    , 0.16029991, 0.31699894, 1.        , 0.        ,\n       0.6       , 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.2       , 0.75      ,\n       0.02      ])",
            "_ezpickle_args": [
              "/home/stud/nalis/thesis/metaworld_constrained/metaworld_constrained/envs/assets_v2/sawyer_xyz/sawyer_pick_place_v2.xml",
              5,
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              [
                -0.5,
                0.4,
                0.05
              ],
              [
                0.5,
                1,
                0.5
              ],
              0.01,
              1.0
            ],
            "_ezpickle_kwargs": {},
            "init_config": {
              "obj_init_angle": 0.3,
              "obj_init_pos": "array([0.  , 0.6 , 0.02])",
              "hand_init_pos": "array([0. , 0.6, 0.2])"
            },
            "goal": "array([0.1, 0.8, 0.2])",
            "obj_init_angle": 0.3,
            "$type": "metaworld_constrained.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
          },
          "_max_episode_length": 500,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
            "_shape": [
              45
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False,  True,  True,  True,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True,  True,  True])",
              "_shape": [
                45
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n       -0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n        0.    ,  0.    ,  0.    ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf, 0.525, 1.025, 0.7  , 1.   ,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf, 0.   , 0.   , 0.   ],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf -0.525   0.348  -0.0525 -1.        -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf  0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7\n 1.      inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.    0.    0.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_task_name": "pick-place-v2",
        "_task_id": "None",
        "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
      }
    ],
    "_all_workers": {
      "0": "Actor(SamplerWorker, 6725af85310cea963577c18701000000)",
      "1": "Actor(SamplerWorker, 6fc93f00876f7d6a4c67f8b401000000)",
      "2": "Actor(SamplerWorker, 16eb3a290d856dc83864160f01000000)",
      "3": "Actor(SamplerWorker, 01fb5c5675e1c584ad8c269e01000000)",
      "4": "Actor(SamplerWorker, 6ce2c3ed36e59bb65770887501000000)",
      "5": "Actor(SamplerWorker, 8ad982a403f7aaa691eea09301000000)",
      "6": "Actor(SamplerWorker, f72a323ca8e414a880d61abd01000000)",
      "7": "Actor(SamplerWorker, 3d858962cf49ca4153ab625801000000)",
      "8": "Actor(SamplerWorker, a5c225d81e5cf4d4922ced6a01000000)",
      "9": "Actor(SamplerWorker, 48cde7773be576139ac8b2e601000000)",
      "10": "Actor(SamplerWorker, af7c0383e90dff7c65db0bb501000000)",
      "11": "Actor(SamplerWorker, a4715a9af13f870e0424e02101000000)",
      "12": "Actor(SamplerWorker, e59d607864777a901eb1c50e01000000)",
      "13": "Actor(SamplerWorker, df309c9d95860648a18e7f2a01000000)",
      "14": "Actor(SamplerWorker, d54d136a6af26cf18a149f2801000000)",
      "15": "Actor(SamplerWorker, 2bdf07d3839205d40f38857801000000)",
      "16": "Actor(SamplerWorker, 5759d8abf46415d83482715601000000)",
      "17": "Actor(SamplerWorker, db4d2684e59e21de3d879c6b01000000)",
      "18": "Actor(SamplerWorker, 177cab067c255723ec01e19601000000)",
      "19": "Actor(SamplerWorker, 9950f76211d73eee1bc3228a01000000)",
      "20": "Actor(SamplerWorker, 4a999b0f05d4d730e083ef9101000000)",
      "21": "Actor(SamplerWorker, ba96e4f9eae45f328a1058a001000000)",
      "22": "Actor(SamplerWorker, 2994438d375ec4574f6c358801000000)",
      "23": "Actor(SamplerWorker, 2bae10335b4db72e6418763101000000)",
      "24": "Actor(SamplerWorker, 10558b4da737448d73aa8b5001000000)"
    },
    "_workers_started": true,
    "total_env_steps": 0,
    "$type": "garage.sampler.ray_sampler.RaySampler"
  },
  "_plotter": "None",
  "_start_time": "None",
  "_itr_start_time": "None",
  "step_itr": 0,
  "step_episode": "None",
  "enable_logging": true,
  "_n_workers": "None",
  "_worker_class": "None",
  "_worker_args": "None",
  "$type": "garage.trainer.Trainer"
}